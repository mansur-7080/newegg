version: '3.8'

services:
  # Product Service (Production)
  product-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: ultramarket/product-service:latest
    container_name: ultramarket-product-service-prod
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - MONGODB_URI=mongodb://mongodb:27017/ultramarket-products
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
      - LOG_LEVEL=warn
      - HELMET_CSP_ENABLE=true
      - HELMET_HSTS_ENABLE=true
      - PRODUCTION_TRUST_PROXY=true
    volumes:
      - product-uploads:/app/uploads
      - product-logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - ultramarket-prod-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB (Production with Replica Set)
  mongodb:
    image: mongo:7.0
    container_name: ultramarket-mongodb-prod
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=ultramarket-products
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./config/mongod.conf:/etc/mongod.conf:ro
      - ./scripts/init-mongo-prod.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    command: ["mongod", "--config", "/etc/mongod.conf"]
    networks:
      - ultramarket-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis (Production with Persistence)
  redis:
    image: redis:7.2-alpine
    container_name: ultramarket-redis-prod
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - ultramarket-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ultramarket-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx-ssl.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx-logs:/var/log/nginx
      - letsencrypt-certs:/etc/letsencrypt:ro
    depends_on:
      - product-service
    networks:
      - ultramarket-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ultramarket-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ultramarket-prod-network
    restart: always

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ultramarket-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ultramarket-prod-network
    restart: always

  # Log Aggregation (ELK Stack - Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: ultramarket-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - ultramarket-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: ultramarket-logstash
    volumes:
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - product-logs:/var/log/app:ro
    depends_on:
      - elasticsearch
    networks:
      - ultramarket-prod-network
    restart: always

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: ultramarket-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ultramarket-prod-network
    restart: always

  # Backup Service
  backup:
    image: mongo:7.0
    container_name: ultramarket-backup
    volumes:
      - mongodb-backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - MONGO_HOST=mongodb
      - MONGO_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_PASSWORD=${MONGO_ROOT_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
    depends_on:
      - mongodb
    networks:
      - ultramarket-prod-network
    restart: "no"
    command: ["cron", "-f"]
    deploy:
      replicas: 1

volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  mongodb-backups:
    driver: local
  redis-data:
    driver: local
  product-uploads:
    driver: local
  product-logs:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  letsencrypt-certs:
    driver: local

networks:
  ultramarket-prod-network:
    driver: bridge
    name: ultramarket-prod-network
    ipam:
      config:
        - subnet: 172.20.0.0/16