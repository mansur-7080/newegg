// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id                String        @id @default(cuid())
  orderNumber       String        @unique
  userId            String
  status            OrderStatus   @default(PENDING)
  totalAmount       Decimal       @db.Decimal(10, 2)
  subtotalAmount    Decimal       @db.Decimal(10, 2)
  taxAmount         Decimal       @db.Decimal(10, 2)
  shippingAmount    Decimal       @db.Decimal(10, 2)
  discountAmount    Decimal       @db.Decimal(10, 2)
  currency          String        @default("USD")
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     PaymentMethod?
  shippingMethod    String?
  trackingNumber    String?
  notes             String?
  customerNotes     String?
  adminNotes        String?
  estimatedDelivery DateTime?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  cancelledBy       String?
  cancelledReason   String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items             OrderItem[]
  payments          Payment[]
  shippingAddress   Address?      @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address?      @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  shippingAddressId String?
  billingAddressId  String?

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  productName String
  productSku  String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  discount    Decimal  @db.Decimal(10, 2) @default(0)
  taxRate     Decimal  @db.Decimal(5, 2) @default(0)
  taxAmount   Decimal  @db.Decimal(10, 2) @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  sessionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String?
  userId        String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  gateway       String?
  gatewayData   Json?
  refundedAt    DateTime?
  refundAmount  Decimal       @db.Decimal(10, 2) @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  order         Order?        @relation(fields: [orderId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Address {
  id          String      @id @default(cuid())
  userId      String
  type        AddressType
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String
  isDefault   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]     @relation("OrderShippingAddress")
  billingOrders Order[]   @relation("OrderBillingAddress")

  @@map("addresses")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders      Order[]
  payments    Payment[]
  addresses   Address[]
  cart        Cart?

  @@map("users")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  CASH_ON_DELIVERY
  CRYPTO
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  MODERATOR
}