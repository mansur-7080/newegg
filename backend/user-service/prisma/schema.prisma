// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  avatarUrl         String?
  emailVerified     Boolean   @default(false)
  status            UserStatus @default(ACTIVE)
  role              UserRole   @default(USER)
  lastLoginAt       DateTime?
  deactivatedAt     DateTime?
  deactivationReason String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  addresses         Address[]
  preferences       UserPreference[]
  orders           Order[]
  reviews          Review[]
  notifications    Notification[]

  @@map("users")
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  type        AddressType
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model UserPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  language          String   @default("en")
  currency          String   @default("USD")
  timezone          String   @default("UTC")
  emailNotifications Boolean @default(true)
  smsNotifications  Boolean  @default(false)
  pushNotifications Boolean  @default(true)
  marketingEmails   Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  currency        String      @default("USD")
  shippingAddress Json
  billingAddress  Json
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  rating      Int      @db.SmallInt
  title       String?
  comment     String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
  VENDOR
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum NotificationType {
  ORDER_UPDATE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  SHIPPING_UPDATE
  PROMOTION
  SYSTEM
  SECURITY
} 