# Docker Compose file for UltraMarket production environment
# Note: version field is obsolete and removed

services:
  # =================== INFRASTRUCTURE SERVICES ===================

  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: ultramarket-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ultramarket}
      POSTGRES_USER: ${POSTGRES_USER:-ultramarket_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/databases/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ultramarket_user -d ultramarket']
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - Document Database
  mongodb:
    image: mongo:7
    container_name: ultramarket-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-ultramarket_admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:?MONGODB_PASSWORD is required}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-ultramarket_products}
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
      - ./data/databases/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: ultramarket-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} is required}
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch - Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ultramarket-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5

  # Apache Kafka - Message Streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ultramarket-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - '9092:9092'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - ultramarket-network

  # Zookeeper - Kafka Coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ultramarket-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    networks:
      - ultramarket-network

  # =================== CORE SERVICES ===================

  # API Gateway
  api-gateway:
    build:
      context: ./services/core/api-gateway
      dockerfile: Dockerfile
    container_name: ultramarket-api-gateway
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${API_GATEWAY_PORT:-3000}
      USER_SERVICE_URL: http://user-service:${USER_SERVICE_PORT:-3001}
      AUTH_SERVICE_URL: http://auth-service:${AUTH_SERVICE_PORT:-3002}
      PRODUCT_SERVICE_URL: http://product-service:${PRODUCT_SERVICE_PORT:-3003}
      ORDER_SERVICE_URL: http://order-service:${ORDER_SERVICE_PORT:-3004}
      PAYMENT_SERVICE_URL: http://payment-service:${PAYMENT_SERVICE_PORT:-3005}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:?JWT_ACCESS_SECRET is required}
    ports:
      - '3000:3000'
    depends_on:
      - redis
      - user-service
      - auth-service
      - product-service
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: ./services/core/user-service
      dockerfile: Dockerfile
    container_name: ultramarket-user-service
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${USER_SERVICE_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:?JWT_REFRESH_SECRET is required}
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./services/core/auth-service
      dockerfile: Dockerfile
    container_name: ultramarket-auth-service
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://ultramarket_user:ultramarket_password@postgres:5432/ultramarket_auth
      REDIS_URL: redis://:ultramarket_password@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-for-development
      JWT_REFRESH_SECRET: your-super-secret-jwt-refresh-key-for-development
    ports:
      - '3002:3002'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # =================== BUSINESS SERVICES ===================

  # Product Service
  product-service:
    build:
      context: ./services/business/product-service
      dockerfile: Dockerfile
    container_name: ultramarket-product-service
    environment:
      NODE_ENV: development
      PORT: 3003
      MONGODB_URI: mongodb://ultramarket_admin:ultramarket_password@mongodb:27017/ultramarket_products?authSource=admin
      ELASTICSEARCH_URL: http://elasticsearch:9200
      REDIS_URL: redis://:ultramarket_password@redis:6379
      KAFKA_BROKERS: kafka:9092
    ports:
      - '3003:3003'
    depends_on:
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3003/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ./services/business/order-service
      dockerfile: Dockerfile
    container_name: ultramarket-order-service
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://ultramarket_user:ultramarket_password@postgres:5432/ultramarket_orders
      REDIS_URL: redis://:ultramarket_password@redis:6379
      KAFKA_BROKERS: kafka:9092
      USER_SERVICE_URL: http://user-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3003
      PAYMENT_SERVICE_URL: http://payment-service:3005
    ports:
      - '3004:3004'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3004/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service
  payment-service:
    build:
      context: ./services/business/payment-service
      dockerfile: Dockerfile
    container_name: ultramarket-payment-service
    environment:
      NODE_ENV: development
      PORT: 3005
      DATABASE_URL: postgresql://ultramarket_user:ultramarket_password@postgres:5432/ultramarket_payments
      REDIS_URL: redis://:ultramarket_password@redis:6379
      KAFKA_BROKERS: kafka:9092
      STRIPE_SECRET_KEY: sk_test_your_stripe_test_key
      STRIPE_WEBHOOK_SECRET: whsec_your_stripe_webhook_secret
    ports:
      - '3005:3005'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3005/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # =================== PLATFORM SERVICES ===================

  # Notification Service
  notification-service:
    build:
      context: ./services/platform/notification-service
      dockerfile: Dockerfile
    container_name: ultramarket-notification-service
    environment:
      NODE_ENV: development
      PORT: 3006
      REDIS_URL: redis://:ultramarket_password@redis:6379
      KAFKA_BROKERS: kafka:9092
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ''
      SMTP_PASS: ''
    ports:
      - '3006:3006'
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      mailhog:
        condition: service_started
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3006/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Search Service
  search-service:
    build:
      context: ./services/platform/search-service
      dockerfile: Dockerfile
    container_name: ultramarket-search-service
    environment:
      NODE_ENV: development
      PORT: 3007
      ELASTICSEARCH_URL: http://elasticsearch:9200
      REDIS_URL: redis://:ultramarket_password@redis:6379
      KAFKA_BROKERS: kafka:9092
      PRODUCT_SERVICE_URL: http://product-service:3003
    ports:
      - '3007:3007'
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3007/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # =================== FRONTEND APPLICATIONS ===================

  # Web Application
  web-app:
    build:
      context: ./apps/web-app
      dockerfile: Dockerfile
    container_name: ultramarket-web-app
    environment:
      NODE_ENV: development
      PORT: 8080
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXT_PUBLIC_WS_URL: ws://localhost:3000
    ports:
      - '8080:8080'
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080']
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ./apps/admin-dashboard
      dockerfile: Dockerfile
    container_name: ultramarket-admin-dashboard
    environment:
      NODE_ENV: development
      PORT: 8081
      NEXT_PUBLIC_API_URL: http://localhost:3000
    ports:
      - '8081:8081'
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8081']
      interval: 30s
      timeout: 10s
      retries: 3

  # =================== MONITORING & OBSERVABILITY ===================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ultramarket-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ultramarket-network

  # Grafana - Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ultramarket-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:?GRAFANA_ADMIN_PASSWORD is required}
    ports:
      - '3001:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ultramarket-network

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ultramarket-jaeger
    ports:
      - '16686:16686'
      - '14268:14268'
    environment:
      COLLECTOR_OTLP_ENABLED: 'true'
    networks:
      - ultramarket-network

  # MailHog - Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ultramarket-mailhog
    ports:
      - '1025:1025'
      - '8025:8025'
    networks:
      - ultramarket-network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:

networks:
  ultramarket-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
