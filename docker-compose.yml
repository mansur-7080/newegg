version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ultramarket_postgres
    environment:
      POSTGRES_DB: ultramarket_auth
      POSTGRES_USER: ${POSTGRES_USER:-ultramarket}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ultramarket_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ultramarket}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ultramarket_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ultramarket_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./microservices/core/auth-service
      dockerfile: Dockerfile
    container_name: ultramarket_auth_service
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - REDIS_URL=${REDIS_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "3001:3001"
    networks:
      - ultramarket_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Application
  web-app:
    build:
      context: ./frontend/web-app
      dockerfile: Dockerfile
    container_name: ultramarket_web_app
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:3001}
      - REACT_APP_SENTRY_DSN=${REACT_APP_SENTRY_DSN}
    ports:
      - "3000:3000"
    networks:
      - ultramarket_network
    depends_on:
      - auth-service
    restart: unless-stopped

  # Admin Panel
  admin-panel:
    build:
      context: ./frontend/admin-panel
      dockerfile: Dockerfile
    container_name: ultramarket_admin_panel
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:3001}
      - REACT_APP_SENTRY_DSN=${REACT_APP_SENTRY_DSN}
    ports:
      - "3002:3000"
    networks:
      - ultramarket_network
    depends_on:
      - auth-service
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ultramarket_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ultramarket_network
    depends_on:
      - web-app
      - admin-panel
      - auth-service
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: ultramarket_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ultramarket_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ultramarket_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3003:3000"
    networks:
      - ultramarket_network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ultramarket_network:
    driver: bridge