apiVersion: v1
kind: Namespace
metadata:
  name: ultramarket-production
  labels:
    app: ultramarket
    environment: production
---
# =============================================
# ConfigMap for Environment Variables
# =============================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: ultramarket-config
  namespace: ultramarket-production
data:
  NODE_ENV: 'production'
  APP_NAME: 'UltraMarket'
  APP_VERSION: '2.0.0'
  LOG_LEVEL: 'info'

  # Database Configuration
  POSTGRES_HOST: 'postgres-service'
  POSTGRES_PORT: '5432'
  POSTGRES_DB: 'ultramarket'
  MONGODB_HOST: 'mongodb-service'
  MONGODB_PORT: '27017'
  MONGODB_DATABASE: 'ultramarket_products'
  REDIS_HOST: 'redis-service'
  REDIS_PORT: '6379'

  # Service Ports
  API_GATEWAY_PORT: '3000'
  USER_SERVICE_PORT: '3001'
  AUTH_SERVICE_PORT: '3002'
  PRODUCT_SERVICE_PORT: '3003'
  ORDER_SERVICE_PORT: '3004'
  PAYMENT_SERVICE_PORT: '3005'
  CART_SERVICE_PORT: '3006'

  # External Services
  ELASTICSEARCH_URL: 'http://elasticsearch:9200'
  PROMETHEUS_PORT: '9090'
  GRAFANA_PORT: '3001'
---
# =============================================
# Secrets for Sensitive Data
# =============================================
apiVersion: v1
kind: Secret
metadata:
  name: ultramarket-secrets
  namespace: ultramarket-production
type: Opaque
stringData:
  # Database Passwords (Base64 encoded in real deployment)
  POSTGRES_PASSWORD: 'REPLACE_WITH_STRONG_PASSWORD'
  MONGODB_PASSWORD: 'REPLACE_WITH_STRONG_PASSWORD'
  REDIS_PASSWORD: 'REPLACE_WITH_STRONG_PASSWORD'

  # JWT Secrets
  JWT_ACCESS_SECRET: 'REPLACE_WITH_64_CHAR_SECRET'
  JWT_REFRESH_SECRET: 'REPLACE_WITH_64_CHAR_SECRET'
  JWT_RESET_SECRET: 'REPLACE_WITH_64_CHAR_SECRET'
  JWT_VERIFICATION_SECRET: 'REPLACE_WITH_64_CHAR_SECRET'

  # Security Keys
  SESSION_SECRET: 'REPLACE_WITH_64_CHAR_SECRET'
  ENCRYPTION_KEY: 'REPLACE_WITH_32_CHAR_KEY'

  # External Service Keys
  STRIPE_SECRET_KEY: 'REPLACE_WITH_STRIPE_SECRET'
  AWS_ACCESS_KEY_ID: 'REPLACE_WITH_AWS_ACCESS_KEY'
  AWS_SECRET_ACCESS_KEY: 'REPLACE_WITH_AWS_SECRET_KEY'
  SMTP_PASSWORD: 'REPLACE_WITH_SMTP_PASSWORD'
---
# =============================================
# PostgreSQL StatefulSet
# =============================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: ultramarket-production
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: ultramarket-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              value: 'ultramarket_user'
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ultramarket-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: '512Mi'
              cpu: '250m'
            limits:
              memory: '2Gi'
              cpu: '1000m'
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - ultramarket_user
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - ultramarket_user
            initialDelaySeconds: 5
            periodSeconds: 5
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: ['ReadWriteOnce']
        resources:
          requests:
            storage: 100Gi
        storageClassName: fast-ssd
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: ultramarket-production
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP
---
# =============================================
# Redis StatefulSet
# =============================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: ultramarket-production
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          command:
            - redis-server
            - --requirepass
            - $(REDIS_PASSWORD)
            - --appendonly
            - 'yes'
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ultramarket-secrets
                  key: REDIS_PASSWORD
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          resources:
            requests:
              memory: '256Mi'
              cpu: '100m'
            limits:
              memory: '1Gi'
              cpu: '500m'
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
  volumeClaimTemplates:
    - metadata:
        name: redis-storage
      spec:
        accessModes: ['ReadWriteOnce']
        resources:
          requests:
            storage: 20Gi
        storageClassName: fast-ssd
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: ultramarket-production
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
# =============================================
# API Gateway Deployment
# =============================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: ultramarket-production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
      containers:
        - name: api-gateway
          image: ultramarket/api-gateway:latest
          ports:
            - containerPort: 3000
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: ultramarket-config
                  key: NODE_ENV
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: ultramarket-config
                  key: API_GATEWAY_PORT
            - name: JWT_ACCESS_SECRET
              valueFrom:
                secretKeyRef:
                  name: ultramarket-secrets
                  key: JWT_ACCESS_SECRET
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ultramarket-secrets
                  key: REDIS_PASSWORD
          resources:
            requests:
              memory: '256Mi'
              cpu: '200m'
            limits:
              memory: '512Mi'
              cpu: '500m'
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: ultramarket-production
spec:
  selector:
    app: api-gateway
  ports:
    - port: 3000
      targetPort: 3000
  type: ClusterIP
---
# =============================================
# User Service Deployment
# =============================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: ultramarket-production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
      containers:
        - name: user-service
          image: ultramarket/user-service:latest
          ports:
            - containerPort: 3001
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: ultramarket-config
                  key: NODE_ENV
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: ultramarket-config
                  key: USER_SERVICE_PORT
            - name: DATABASE_URL
              value: 'postgresql://ultramarket_user:$(POSTGRES_PASSWORD)@postgres-service:5432/ultramarket'
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ultramarket-secrets
                  key: POSTGRES_PASSWORD
            - name: JWT_ACCESS_SECRET
              valueFrom:
                secretKeyRef:
                  name: ultramarket-secrets
                  key: JWT_ACCESS_SECRET
            - name: JWT_REFRESH_SECRET
              valueFrom:
                secretKeyRef:
                  name: ultramarket-secrets
                  key: JWT_REFRESH_SECRET
          resources:
            requests:
              memory: '256Mi'
              cpu: '200m'
            limits:
              memory: '512Mi'
              cpu: '500m'
          livenessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 3001
            initialDelaySeconds: 5
            periodSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: ultramarket-production
spec:
  selector:
    app: user-service
  ports:
    - port: 3001
      targetPort: 3001
  type: ClusterIP
---
# =============================================
# HorizontalPodAutoscaler for API Gateway
# =============================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: ultramarket-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# =============================================
# Network Policies for Security
# =============================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ultramarket-network-policy
  namespace: ultramarket-production
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - podSelector:
            matchLabels:
              app: api-gateway
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to:
        - podSelector:
            matchLabels:
              app: postgres
      ports:
        - protocol: TCP
          port: 5432
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379
---
# =============================================
# Pod Disruption Budget
# =============================================
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: ultramarket-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api-gateway
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-service-pdb
  namespace: ultramarket-production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: user-service
---
# =============================================
# Resource Quotas
# =============================================
apiVersion: v1
kind: ResourceQuota
metadata:
  name: ultramarket-quota
  namespace: ultramarket-production
spec:
  hard:
    requests.cpu: '10'
    requests.memory: 20Gi
    limits.cpu: '20'
    limits.memory: 40Gi
    pods: '50'
    services: '20'
    persistentvolumeclaims: '10'
---
# =============================================
# Ingress Configuration
# =============================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ultramarket-ingress
  namespace: ultramarket-production
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/rate-limit: '100'
    nginx.ingress.kubernetes.io/rate-limit-window: '1m'
    cert-manager.io/cluster-issuer: 'letsencrypt-prod'
spec:
  tls:
    - hosts:
        - api.ultramarket.com
        - ultramarket.com
      secretName: ultramarket-tls
  rules:
    - host: api.ultramarket.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: api-gateway-service
                port:
                  number: 3000
    - host: ultramarket.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web-app-service
                port:
                  number: 3000
