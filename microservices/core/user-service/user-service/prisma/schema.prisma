generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  username        String    @unique
  passwordHash    String
  firstName       String
  lastName        String
  phoneNumber     String?
  role            String    @default("CUSTOMER")  // CUSTOMER, SELLER, ADMIN, SUPER_ADMIN
  isActive        Boolean   @default(true)
  isEmailVerified Boolean   @default(false)
  profileImage    String?
  bio             String?
  
  addresses       Address[]
  sessions        Session[]
  refreshTokens   RefreshToken[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginAt     DateTime?
  
  @@index([email])
  @@index([username])
  @@index([role])
}

model Address {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        String    // SHIPPING, BILLING
  street1     String
  street2     String?
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean   @default(false)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
}

model Session {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token       String    @unique
  userAgent   String?
  ipAddress   String?
  
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  
  @@index([userId])
  @@index([token])
}

model RefreshToken {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token       String    @unique
  expiresAt   DateTime
  
  createdAt   DateTime  @default(now())
  
  @@index([userId])
  @@index([token])
}

model EmailVerification {
  id          String    @id @default(uuid())
  email       String
  token       String    @unique
  expiresAt   DateTime
  
  createdAt   DateTime  @default(now())
  
  @@index([email])
  @@index([token])
}

model PasswordReset {
  id          String    @id @default(uuid())
  email       String
  token       String    @unique
  expiresAt   DateTime
  used        Boolean   @default(false)
  
  createdAt   DateTime  @default(now())
  
  @@index([email])
  @@index([token])
}

// For SQLite compatibility, using String instead of enum
// UserRole: CUSTOMER, SELLER, ADMIN, SUPER_ADMIN
// AddressType: SHIPPING, BILLING 