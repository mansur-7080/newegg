# UltraMarket Production Docker Compose Configuration
# Professional deployment with proper security, monitoring, and scalability

networks:
  ultramarket-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

services:
  # ======================
  # DATABASES
  # ======================

  postgres:
    image: postgres:15-alpine
    container_name: ultramarket-postgres-prod
    environment:
      POSTGRES_DB: ultramarket_production
      POSTGRES_USER: ultramarket_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: auth_db,user_db,order_db,payment_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
      - ./config/docker/postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - '5432:5432'
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ultramarket_user -d ultramarket_production']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  mongodb:
    image: mongo:7
    container_name: ultramarket-mongodb-prod
    environment:
      MONGO_INITDB_ROOT_USERNAME: ultramarket_admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ultramarket_products
    volumes:
      - mongodb_data:/data/db
      - ./scripts/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    ports:
      - '27017:27017'
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: ultramarket-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
      - ./config/docker/redis/config/redis.conf:/etc/redis/redis.conf
    ports:
      - '6379:6379'
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ['CMD', 'redis-cli', '--pass', '${REDIS_PASSWORD}', 'ping']
      interval: 30s
      timeout: 5s
      retries: 5

  # ======================
  # MICROSERVICES - CORE
  # ======================

  auth-service:
    build:
      context: .
      dockerfile: microservices/core/auth-service/Dockerfile
      target: production
    container_name: ultramarket-auth-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3001
      - SERVICE_NAME=auth-service
      - DATABASE_URL=postgresql://ultramarket_user:${POSTGRES_PASSWORD}@postgres:5432/auth_db
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: .
      dockerfile: microservices/core/user-service/Dockerfile
      target: production
    container_name: ultramarket-user-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3002
      - SERVICE_NAME=user-service
      - DATABASE_URL=postgresql://ultramarket_user:${POSTGRES_PASSWORD}@postgres:5432/user_db
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - '3002:3002'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health']
      interval: 30s
      timeout: 10s
      retries: 3

  admin-service:
    build:
      context: .
      dockerfile: microservices/admin/admin-service/Dockerfile
      target: production
    container_name: ultramarket-admin-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3019
      - SERVICE_NAME=admin-service
      - DATABASE_URL=postgresql://ultramarket_user:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - '3019:3019'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3019/health']
      interval: 30s
      timeout: 10s
      retries: 3

  advanced-analytics-service:
    build:
      context: .
      dockerfile: microservices/analytics/advanced-analytics-service/Dockerfile
      target: production
    container_name: ultramarket-analytics-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3020
      - SERVICE_NAME=advanced-analytics-service
      - DATABASE_URL=postgresql://ultramarket_user:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - '3020:3020'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3020/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # ======================
  # BUSINESS SERVICES
  # ======================

  payment-service:
    build:
      context: .
      dockerfile: microservices/business/payment-service/Dockerfile
      target: production
    container_name: ultramarket-payment-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3005
      - SERVICE_NAME=payment-service
      - DATABASE_URL=postgresql://ultramarket_user:${POSTGRES_PASSWORD}@postgres:5432/payment_db
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - CLICK_SERVICE_ID=${CLICK_SERVICE_ID}
      - CLICK_MERCHANT_ID=${CLICK_MERCHANT_ID}
      - CLICK_SECRET_KEY=${CLICK_SECRET_KEY}
      - PAYME_MERCHANT_ID=${PAYME_MERCHANT_ID}
      - PAYME_SECRET_KEY=${PAYME_SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - '3005:3005'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3005/health']
      interval: 30s
      timeout: 10s
      retries: 3

  vendor-management-service:
    build:
      context: .
      dockerfile: microservices/business/vendor-management-service/Dockerfile
      target: production
    container_name: ultramarket-vendor-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3021
      - SERVICE_NAME=vendor-management-service
      - DATABASE_URL=postgresql://ultramarket_user:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_production
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - '3021:3021'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3021/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # ======================
  # FRONTEND APPLICATIONS
  # ======================

  web-app:
    build:
      context: ./frontend/web-app
      dockerfile: Dockerfile.prod
      target: production
    container_name: ultramarket-web-app-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.ultramarket.uz
      - NEXT_PUBLIC_WS_URL=wss://api.ultramarket.uz
      - NEXT_PUBLIC_CDN_URL=${CDN_URL}
    ports:
      - '8080:80'
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/health']
      interval: 30s
      timeout: 10s
      retries: 3

  admin-panel:
    build:
      context: ./frontend/admin-panel
      dockerfile: Dockerfile.prod
      target: production
    container_name: ultramarket-admin-panel-prod
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.ultramarket.uz
      - REACT_APP_ADMIN_API_URL=https://admin-api.ultramarket.uz
    ports:
      - '8081:80'
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80']
      interval: 30s
      timeout: 10s
      retries: 3

  # ======================
  # LOAD BALANCER & REVERSE PROXY
  # ======================

  nginx:
    image: nginx:alpine
    container_name: ultramarket-nginx-prod
    volumes:
      - ./config/nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - web-app
      - admin-panel
      - auth-service
      - user-service
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/health']
      interval: 30s
      timeout: 5s
      retries: 3

  # ======================
  # MONITORING & OBSERVABILITY
  # ======================

  prometheus:
    image: prom/prometheus:latest
    container_name: ultramarket-prometheus-prod
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - '9090:9090'
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: ultramarket-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - '3000:3000'
    depends_on:
      - prometheus
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ======================
  # SEARCH & ANALYTICS
  # ======================

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ultramarket-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5

# ======================
# PRODUCTION OVERRIDES
# ======================

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Apply logging to all services
x-service-defaults: &service-defaults
  logging: *default-logging
