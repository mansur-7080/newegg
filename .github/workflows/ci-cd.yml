name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Testing
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend/web-app && npm ci
          cd ../../backend/cart-service && npm ci
          cd ../payment-service && npm ci
          cd ../notification-service && npm ci
          cd ../search-service && npm ci

      - name: Run linting
        run: |
          npm run lint
          cd frontend/web-app && npm run lint
          cd ../../backend/cart-service && npm run lint
          cd ../payment-service && npm run lint
          cd ../notification-service && npm run lint
          cd ../search-service && npm run lint

      - name: Run type checking
        run: |
          cd frontend/web-app && npm run type-check
          cd ../../backend/cart-service && npm run build
          cd ../payment-service && npm run build
          cd ../notification-service && npm run build
          cd ../search-service && npm run build

      - name: Run tests
        run: |
          npm test
          cd frontend/web-app && npm test
          cd ../../backend/cart-service && npm test
          cd ../payment-service && npm test
          cd ../notification-service && npm test
          cd ../search-service && npm test

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [cart-service, payment-service, notification-service, search-service, web-app]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          kubectl apply -f infrastructure/kubernetes/staging/
          kubectl rollout status deployment/ultramarket-web-app -n ultramarket-staging
          kubectl rollout status deployment/ultramarket-cart-service -n ultramarket-staging
          kubectl rollout status deployment/ultramarket-payment-service -n ultramarket-staging
          kubectl rollout status deployment/ultramarket-notification-service -n ultramarket-staging
          kubectl rollout status deployment/ultramarket-search-service -n ultramarket-staging

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          kubectl apply -f infrastructure/kubernetes/production/
          kubectl rollout status deployment/ultramarket-web-app -n ultramarket-production
          kubectl rollout status deployment/ultramarket-cart-service -n ultramarket-production
          kubectl rollout status deployment/ultramarket-payment-service -n ultramarket-production
          kubectl rollout status deployment/ultramarket-notification-service -n ultramarket-production
          kubectl rollout status deployment/ultramarket-search-service -n ultramarket-production

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Test health endpoints
          curl -f https://api.ultramarket.com/health || exit 1
          curl -f https://api.ultramarket.com/cart/health || exit 1
          curl -f https://api.ultramarket.com/payment/health || exit 1
          curl -f https://api.ultramarket.com/notification/health || exit 1
          curl -f https://api.ultramarket.com/search/health || exit 1

  # Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()