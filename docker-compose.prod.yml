# Docker Compose file for UltraMarket production environment
# Optimized for production with security, monitoring, and scalability

version: '3.8'

services:
  # =================== INFRASTRUCTURE SERVICES ===================

  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: ultramarket-postgres-prod
    environment:
      POSTGRES_DB: ultramarket_prod
      POSTGRES_USER: ultramarket_prod_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    networks:
      - ultramarket-prod-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ultramarket_prod_user -d ultramarket_prod']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # MongoDB - Document Database
  mongodb:
    image: mongo:7
    container_name: ultramarket-mongodb-prod
    environment:
      MONGO_INITDB_ROOT_USERNAME: ultramarket_prod_admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ultramarket_products_prod
    ports:
      - '27017:27017'
    volumes:
      - mongodb_prod_data:/data/db
    networks:
      - ultramarket-prod-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: ultramarket-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    ports:
      - '6379:6379'
    volumes:
      - redis_prod_data:/data
    networks:
      - ultramarket-prod-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Elasticsearch - Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ultramarket-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
      - cluster.name=ultramarket-cluster
      - node.name=ultramarket-node
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_prod_data:/usr/share/elasticsearch/data
    networks:
      - ultramarket-prod-network
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 60s
      timeout: 20s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Kafka - Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ultramarket-zookeeper-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ultramarket-kafka-prod
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - '9092:9092'
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # =================== CORE SERVICES ===================

  # API Gateway
  api-gateway:
    build:
      context: ./microservices/core/api-gateway/api-gateway
      dockerfile: Dockerfile.prod
    container_name: ultramarket-api-gateway-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      USER_SERVICE_URL: http://user-service:3001
      AUTH_SERVICE_URL: http://auth-service:3002
      PRODUCT_SERVICE_URL: http://product-service:3003
      ORDER_SERVICE_URL: http://order-service:3004
      PAYMENT_SERVICE_URL: http://payment-service:3005
      CART_SERVICE_URL: http://cart-service:3006
      SEARCH_SERVICE_URL: http://search-service:3007
      NOTIFICATION_SERVICE_URL: http://notification-service:3008
      ANALYTICS_SERVICE_URL: http://analytics-service:3009
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports:
      - '3000:3000'
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # User Service
  user-service:
    build:
      context: ./microservices/core/user-service/user-service
      dockerfile: Dockerfile.prod
    container_name: ultramarket-user-service-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      SERVICE_NAME: user-service
      DATABASE_URL: postgresql://ultramarket_prod_user:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      BCRYPT_ROUNDS: 12
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Auth Service
  auth-service:
    build:
      context: ./microservices/core/auth-service
      dockerfile: Dockerfile.prod
    container_name: ultramarket-auth-service-prod
    environment:
      NODE_ENV: production
      PORT: 3002
      SERVICE_NAME: auth-service
      DATABASE_URL: postgresql://ultramarket_prod_user:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      BCRYPT_ROUNDS: 12
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      FRONTEND_URL: ${FRONTEND_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # =================== BUSINESS SERVICES ===================

  # Product Service
  product-service:
    build:
      context: ./microservices/business/product-service/product-service
      dockerfile: Dockerfile.prod
    container_name: ultramarket-product-service-prod
    environment:
      NODE_ENV: production
      PORT: 3003
      SERVICE_NAME: product-service
      MONGODB_URI: mongodb://ultramarket_prod_admin:${MONGO_PASSWORD}@mongodb:27017/ultramarket_products_prod
      ELASTICSEARCH_URL: http://elasticsearch:9200
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Order Service
  order-service:
    build:
      context: ./microservices/business/order-service/order-service
      dockerfile: Dockerfile.prod
    container_name: ultramarket-order-service-prod
    environment:
      NODE_ENV: production
      PORT: 3004
      SERVICE_NAME: order-service
      MONGODB_URI: mongodb://ultramarket_prod_admin:${MONGO_PASSWORD}@mongodb:27017/ultramarket_orders_prod
      KAFKA_BROKERS: kafka:29092
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Payment Service
  payment-service:
    build:
      context: ./microservices/business/payment-service/payment-service
      dockerfile: Dockerfile.prod
    container_name: ultramarket-payment-service-prod
    environment:
      NODE_ENV: production
      PORT: 3005
      SERVICE_NAME: payment-service
      DATABASE_URL: postgresql://ultramarket_prod_user:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_prod
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      KAFKA_BROKERS: kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Cart Service
  cart-service:
    build:
      context: ./microservices/business/cart-service/cart-service
      dockerfile: Dockerfile.prod
    container_name: ultramarket-cart-service-prod
    environment:
      NODE_ENV: production
      PORT: 3006
      SERVICE_NAME: cart-service
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      PRODUCT_SERVICE_URL: http://product-service:3003
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # =================== PLATFORM SERVICES ===================

  # Search Service
  search-service:
    build:
      context: ./microservices/platform/search-service/search-service
      dockerfile: Dockerfile.prod
    container_name: ultramarket-search-service-prod
    environment:
      NODE_ENV: production
      PORT: 3007
      SERVICE_NAME: search-service
      ELASTICSEARCH_URL: http://elasticsearch:9200
      PRODUCT_SERVICE_URL: http://product-service:3003
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Notification Service
  notification-service:
    build:
      context: ./microservices/platform/notification-service/notification-service
      dockerfile: Dockerfile.prod
    container_name: ultramarket-notification-service-prod
    environment:
      NODE_ENV: production
      PORT: 3008
      SERVICE_NAME: notification-service
      KAFKA_BROKERS: kafka:29092
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Analytics Service
  analytics-service:
    build:
      context: ./microservices/analytics/analytics-service
      dockerfile: Dockerfile.prod
    container_name: ultramarket-analytics-service-prod
    environment:
      NODE_ENV: production
      PORT: 3009
      SERVICE_NAME: analytics-service
      MONGODB_URI: mongodb://ultramarket_prod_admin:${MONGO_PASSWORD}@mongodb:27017/ultramarket_analytics_prod
      KAFKA_BROKERS: kafka:29092
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # =================== MONITORING STACK ===================

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ultramarket-prometheus-prod
    ports:
      - '9090:9090'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ultramarket-grafana-prod
    ports:
      - '3001:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ultramarket-jaeger-prod
    ports:
      - '16686:16686'
      - '14268:14268'
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # =================== LOAD BALANCER ===================

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ultramarket-nginx-prod
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - ultramarket-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# =================== NETWORKS ===================

networks:
  ultramarket-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =================== VOLUMES ===================

volumes:
  postgres_prod_data:
    driver: local
  mongodb_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  elasticsearch_prod_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
