version: '3.8'

services:
  # API Gateway (Production)
  api-gateway:
    build:
      context: .
      dockerfile: microservices/core/api-gateway/api-gateway/Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - AUTH_SERVICE_URL=http://auth-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - PAYMENT_SERVICE_URL=http://payment-service:3005
      - SEARCH_SERVICE_URL=http://product-service:3003
      - NOTIFICATION_SERVICE_URL=http://notification-service:3007
      - ANALYTICS_SERVICE_URL=http://analytics-service:3008
      - CORS_ORIGIN=https://ultramarket.uz,https://www.ultramarket.uz
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    depends_on:
      - auth-service
      - product-service
      - order-service
      - payment-service
      - notification-service
      - analytics-service
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service (Production)
  auth-service:
    build:
      context: .
      dockerfile: microservices/core/auth-service/Dockerfile
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=production
      - PORT=3002
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://ultramarket:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_auth
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_ACCESS_EXPIRES_IN=15m
      - JWT_REFRESH_EXPIRES_IN=7d
      - CORS_ORIGIN=https://ultramarket.uz
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service (Production)
  product-service:
    build:
      context: .
      dockerfile: microservices/business/product-service/product-service/Dockerfile
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=production
      - PORT=3003
      - HOST=0.0.0.0
      - MONGODB_URI=mongodb://ultramarket:${MONGO_PASSWORD}@mongo:27017/ultramarket_products
      - DATABASE_URL=postgresql://ultramarket:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_products
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=https://ultramarket.uz
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - mongo
      - postgres
      - redis
      - elasticsearch
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3003/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service (Production)
  order-service:
    build:
      context: .
      dockerfile: microservices/business/order-service/order-service/Dockerfile
    ports:
      - '3004:3004'
    environment:
      - NODE_ENV=production
      - PORT=3004
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://ultramarket:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_orders
      - CORS_ORIGIN=https://ultramarket.uz
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3004/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service (Production)
  payment-service:
    build:
      context: .
      dockerfile: microservices/business/payment-service/payment-service/Dockerfile
    ports:
      - '3005:3005'
    environment:
      - NODE_ENV=production
      - PORT=3005
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://ultramarket:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_payments
      - CORS_ORIGIN=https://ultramarket.uz
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - CLICK_SERVICE_ID=${CLICK_SERVICE_ID}
      - CLICK_MERCHANT_ID=${CLICK_MERCHANT_ID}
      - CLICK_SECRET_KEY=${CLICK_SECRET_KEY}
      - PAYME_MERCHANT_ID=${PAYME_MERCHANT_ID}
      - PAYME_SECRET_KEY=${PAYME_SECRET_KEY}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3005/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service (Production)
  notification-service:
    build:
      context: .
      dockerfile: microservices/platform/notification-service/notification-service/Dockerfile
    ports:
      - '3007:3007'
    environment:
      - NODE_ENV=production
      - PORT=3007
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://ultramarket:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_notifications
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMS_PROVIDER=${SMS_PROVIDER}
      - SMS_API_KEY=${SMS_API_KEY}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
    depends_on:
      - postgres
      - redis
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3007/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service (Production)
  analytics-service:
    build:
      context: .
      dockerfile: microservices/analytics/analytics-service/Dockerfile
    ports:
      - '3008:3008'
    environment:
      - NODE_ENV=production
      - PORT=3008
      - HOST=0.0.0.0
      - CLICKHOUSE_URL=http://clickhouse:8123
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://ultramarket:${POSTGRES_PASSWORD}@postgres:5432/ultramarket_analytics
    depends_on:
      - clickhouse
      - redis
      - postgres
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3008/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web App (Production)
  web-app:
    build:
      context: ./frontend/web-app
      dockerfile: Dockerfile.prod
    ports:
      - '8080:80'
    environment:
      - VITE_API_URL=https://api.ultramarket.uz
      - VITE_APP_ENV=production
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80']
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Panel (Production)
  admin-panel:
    build:
      context: ./frontend/admin-panel
      dockerfile: Dockerfile.prod
    ports:
      - '8081:80'
    environment:
      - VITE_API_URL=https://api.ultramarket.uz
      - VITE_APP_ENV=production
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80']
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=ultramarket
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=ultramarket_main
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
      - ./scripts/database/backup:/backup
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ultramarket']
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database (Production)
  mongo:
    image: mongo:6.0
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ultramarket
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=ultramarket_products
    volumes:
      - mongo_data:/data/db
      - ./scripts/database/backup:/backup
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', 'db.adminCommand("ping")']
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch (Production)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    ports:
      - '9200:9200'
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3

  # ClickHouse (Production)
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    ports:
      - '8123:8123'
      - '9000:9000'
    environment:
      - CLICKHOUSE_DB=ultramarket_analytics
      - CLICKHOUSE_USER=ultramarket
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:8123/ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - ./infrastructure/nginx/sites-enabled:/etc/nginx/sites-enabled
    depends_on:
      - api-gateway
      - web-app
      - admin-panel
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring (Production)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Grafana Dashboard (Production)
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # AlertManager (Production)
  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - '9093:9093'
    volumes:
      - ./infrastructure/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - ultramarket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  clickhouse_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  ultramarket-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
