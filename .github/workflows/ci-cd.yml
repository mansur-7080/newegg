name: UltraMarket CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd microservices/core/auth-service
          npm ci

      - name: Run security audit
        run: |
          cd microservices/core/auth-service
          npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Linting and Code Quality
  lint-and-quality:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd microservices/core/auth-service
          npm ci

      - name: Run ESLint
        run: |
          cd microservices/core/auth-service
          npm run lint

      - name: Run Prettier check
        run: |
          cd microservices/core/auth-service
          npx prettier --check src/**/*.ts

      - name: TypeScript type check
        run: |
          cd microservices/core/auth-service
          npx tsc --noEmit

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ultramarket_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd microservices/core/auth-service
          npm ci

      - name: Setup test database
        run: |
          cd microservices/core/auth-service
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ultramarket_test" > .env.test
          npx prisma migrate deploy --schema=./prisma/schema.prisma

      - name: Run unit tests
        run: |
          cd microservices/core/auth-service
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./microservices/core/auth-service/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ultramarket_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd microservices/core/auth-service
          npm ci

      - name: Setup test environment
        run: |
          cd microservices/core/auth-service
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ultramarket_integration_test" > .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          npx prisma migrate deploy --schema=./prisma/schema.prisma

      - name: Run integration tests
        run: |
          cd microservices/core/auth-service
          npm run test:integration

  # Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint-and-quality, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd microservices/core/auth-service
          npm ci

      - name: Build application
        run: |
          cd microservices/core/auth-service
          npm run build

      - name: Create Docker image
        run: |
          docker build -t ultramarket/auth-service:${{ github.sha }} ./microservices/core/auth-service
          docker build -t ultramarket/web-app:${{ github.sha }} ./frontend/web-app
          docker build -t ultramarket/admin-panel:${{ github.sha }} ./frontend/admin-panel

      - name: Upload Docker images
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: |
            ./microservices/core/auth-service/dist
            ./frontend/web-app/build
            ./frontend/admin-panel/build

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test logic here
          # Example: curl -f http://staging.ultramarket.uz/health

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: kubectl apply -f k8s/production/
          # Example: docker-compose -f docker-compose.production.yml up -d

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Add health check logic here
          # Example: curl -f https://ultramarket.uz/health

      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully!"
          # Add notification logic here (Slack, email, etc.)

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run performance tests
        run: |
          artillery run ./tests/performance/auth-service.yml
          artillery run ./tests/performance/api-endpoints.yml

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: ./artillery-report.json

  # Dependency Updates
  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependabot
        run: npm install -g @dependabot/npm-check-updates

      - name: Check for updates
        run: |
          cd microservices/core/auth-service
          ncu --target minor

      - name: Create PR for updates
        run: |
          # Add logic to create PR for dependency updates
          echo "Creating PR for dependency updates..."
