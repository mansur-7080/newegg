// This is the complete Prisma schema for User Service
// Generator and datasource configuration
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("USER_DATABASE_URL")
}

// Enums
enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum AddressType {
  HOME
  WORK
  BILLING
  SHIPPING
  OTHER
}

enum NotificationPreference {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum PrivacyLevel {
  PUBLIC
  FRIENDS
  PRIVATE
}

// Models
model User {
  id              String     @id @default(cuid())
  email           String     @unique
  username        String?    @unique
  firstName       String?
  lastName        String?
  phoneNumber     String?    @unique
  dateOfBirth     DateTime?
  gender          Gender?
  avatar          String?
  bio             String?
  website         String?
  role            UserRole   @default(CUSTOMER)
  status          UserStatus @default(PENDING_VERIFICATION)
  emailVerified   Boolean    @default(false)
  phoneVerified   Boolean    @default(false)
  lastActiveAt    DateTime?
  timezone        String?
  language        String?    @default("uz")
  currency        String?    @default("UZS")
  metadata        Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  profile         UserProfile?
  addresses       Address[]
  preferences     UserPreference?
  socialProfiles  SocialProfile[]
  followers       UserFollower[] @relation("UserFollowers")
  following       UserFollower[] @relation("UserFollowing")
  blocks          UserBlock[]    @relation("UserBlocks")
  blockedBy       UserBlock[]    @relation("UserBlockedBy")
  activities      UserActivity[]
  notifications   UserNotification[]

  @@map("users")
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  occupation        String?
  company           String?
  education         String?
  interests         String[]
  skills            String[]
  experienceLevel   String?
  profileCompletion Int      @default(0)
  isPublic          Boolean  @default(true)
  allowMessages     Boolean  @default(true)
  showEmail         Boolean  @default(false)
  showPhone         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Address {
  id           String      @id @default(cuid())
  userId       String
  type         AddressType @default(HOME)
  label        String?
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String?
  postalCode   String?
  country      String
  phoneNumber  String?
  isDefault    Boolean     @default(false)
  latitude     Float?
  longitude    Float?
  instructions String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model UserPreference {
  id                        String                   @id @default(cuid())
  userId                    String                   @unique
  notificationPreferences   NotificationPreference[] @default([EMAIL, PUSH])
  emailNotifications        Boolean                  @default(true)
  smsNotifications          Boolean                  @default(false)
  pushNotifications         Boolean                  @default(true)
  marketingEmails           Boolean                  @default(false)
  orderUpdates              Boolean                  @default(true)
  priceAlerts               Boolean                  @default(true)
  wishlistUpdates           Boolean                  @default(true)
  reviewReminders           Boolean                  @default(true)
  weeklyDigest              Boolean                  @default(false)
  privacyLevel              PrivacyLevel             @default(PUBLIC)
  showOnlineStatus          Boolean                  @default(true)
  allowSearchByEmail        Boolean                  @default(false)
  allowSearchByPhone        Boolean                  @default(false)
  twoFactorEnabled          Boolean                  @default(false)
  sessionTimeout            Int                      @default(30) // minutes
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model SocialProfile {
  id       String @id @default(cuid())
  userId   String
  platform String // facebook, twitter, instagram, linkedin, etc.
  username String
  url      String
  verified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@map("social_profiles")
}

model UserFollower {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("user_followers")
}

model UserBlock {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  reason    String?
  createdAt DateTime @default(now())

  // Relations
  blocker User @relation("UserBlocks", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("UserBlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@map("user_blocks")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  action      String   // login, logout, profile_update, etc.
  description String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model UserNotification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   // info, warning, error, success
  read      Boolean  @default(false)
  readAt    DateTime?
  data      Json?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notifications")
}

model UserSession {
  id         String   @id @default(cuid())
  userId     String
  sessionId  String   @unique
  deviceInfo Json?
  ipAddress  String?
  userAgent  String?
  location   Json?
  isActive   Boolean  @default(true)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("user_sessions")
}

model UserVerification {
  id           String   @id @default(cuid())
  userId       String
  type         String   // email, phone, identity
  token        String   @unique
  verified     Boolean  @default(false)
  verifiedAt   DateTime?
  expiresAt    DateTime
  attempts     Int      @default(0)
  maxAttempts  Int      @default(3)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("user_verifications")
} 