// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  role            String    @default("CUSTOMER")
  isEmailVerified Boolean   @default(false)
  isPhoneVerified Boolean   @default(false)
  status          String     @default("ACTIVE")
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  refreshTokens   RefreshToken[]
  passwordResets  PasswordReset[]
  auditLogs       AuditLog[]
  securityLogs    SecurityLog[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model AuditLog {
  id        String   @id @default(cuid())
  event     String
  userId    String?
  email     String?
  ipAddress String?
  userAgent String?
  action    String?
  resource  String?
  details   String?
  metadata  String?
  timestamp DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model SecurityLog {
  id        String   @id @default(cuid())
  userId    String?
  event     String
  ipAddress String?
  userAgent String?
  success   Boolean  @default(false)
  details   String?
  timestamp DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("email_verifications")
}

// Note: Using String types instead of enums for SQLite compatibility
// UserRole values: CUSTOMER, VENDOR, ADMIN, SUPER_ADMIN
// UserStatus values: ACTIVE, INACTIVE, SUSPENDED, BANNED 