// This is the complete Prisma schema for Store Service
// Generator and datasource configuration
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("STORE_DATABASE_URL")
}

// Enums
enum StoreStatus {
  PENDING
  ACTIVE
  SUSPENDED
  CLOSED
  UNDER_REVIEW
}

enum StoreType {
  INDIVIDUAL
  BUSINESS
  ENTERPRISE
}

enum StaffRole {
  OWNER
  MANAGER
  EMPLOYEE
  VIEWER
  ACCOUNTANT
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}

enum DocumentType {
  BUSINESS_LICENSE
  TAX_CERTIFICATE
  IDENTITY_CARD
  BANK_STATEMENT
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

// Models
model Store {
  id              String      @id @default(cuid())
  name            String
  slug            String      @unique
  description     String?
  shortDescription String?
  logo            String?
  banner          String?
  coverImage      String?
  ownerId         String
  type            StoreType   @default(INDIVIDUAL)
  status          StoreStatus @default(PENDING)
  isVerified      Boolean     @default(false)
  isActive        Boolean     @default(true)
  
  // Business Information
  businessLicense String?
  taxNumber       String?
  registrationNumber String?
  vatNumber       String?
  
  // Contact Information
  email           String?
  phone           String?
  website         String?
  socialMedia     Json?       // {facebook, instagram, telegram, etc.}
  
  // Address Information
  address         String?
  city            String?
  region          String?
  country         String      @default("UZ")
  postalCode      String?
  latitude        Float?
  longitude       Float?
  timezone        String      @default("Asia/Tashkent")
  
  // Business Hours
  businessHours   Json?       // {monday: {open: "09:00", close: "18:00"}, ...}
  
  // Settings
  settings        Json?
  preferences     Json?
  theme           Json?
  
  // Analytics
  views           Int         @default(0)
  followers       Int         @default(0)
  rating          Float?      @default(0)
  reviewCount     Int         @default(0)
  totalSales      Decimal?    @db.Decimal(12, 2) @default(0)
  totalOrders     Int         @default(0)
  
  // Subscription
  subscriptionPlan SubscriptionPlan @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  subscriptionExpiresAt DateTime?
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  verifiedAt      DateTime?
  suspendedAt     DateTime?
  closedAt        DateTime?

  // Relations
  staff           StoreStaff[]
  categories      StoreCategory[]
  documents       StoreDocument[]
  analytics       StoreAnalytics[]
  subscriptions   StoreSubscription[]
  notifications   StoreNotification[]
  reviews         StoreReview[]
  followers       StoreFollower[]

  @@map("stores")
}

model StoreStaff {
  id          String      @id @default(cuid())
  storeId     String
  userId      String
  email       String
  firstName   String
  lastName    String
  role        StaffRole   @default(EMPLOYEE)
  status      StaffStatus @default(ACTIVE)
  permissions Json?       // Custom permissions
  salary      Decimal?    @db.Decimal(10, 2)
  joinedAt    DateTime    @default(now())
  leftAt      DateTime?
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, userId])
  @@map("store_staff")
}

model StoreCategory {
  id          String  @id @default(cuid())
  storeId     String
  name        String
  slug        String
  description String?
  image       String?
  parentId    String?
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)
  productCount Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  store    Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  parent   StoreCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children StoreCategory[] @relation("CategoryHierarchy")

  @@unique([storeId, slug])
  @@map("store_categories")
}

model StoreDocument {
  id          String         @id @default(cuid())
  storeId     String
  type        DocumentType
  name        String
  description String?
  fileUrl     String
  fileName    String
  fileSize    Int?
  mimeType    String?
  status      DocumentStatus @default(PENDING)
  reviewedBy  String?
  reviewedAt  DateTime?
  reviewNotes String?
  expiresAt   DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("store_documents")
}

model StoreAnalytics {
  id            String   @id @default(cuid())
  storeId       String
  date          DateTime @db.Date
  views         Int      @default(0)
  uniqueViews   Int      @default(0)
  productViews  Int      @default(0)
  orders        Int      @default(0)
  sales         Decimal  @db.Decimal(12, 2) @default(0)
  visitors      Int      @default(0)
  bounceRate    Float?   @default(0)
  avgSessionTime Int?    @default(0) // in seconds
  topProducts   Json?    // Array of product IDs with view counts
  topCategories Json?    // Array of category IDs with view counts
  trafficSources Json?   // {organic: 100, social: 50, direct: 30}
  deviceTypes   Json?    // {desktop: 80, mobile: 60, tablet: 10}
  createdAt     DateTime @default(now())

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, date])
  @@map("store_analytics")
}

model StoreSubscription {
  id          String             @id @default(cuid())
  storeId     String
  plan        SubscriptionPlan
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime           @default(now())
  endDate     DateTime
  amount      Decimal            @db.Decimal(10, 2)
  currency    String             @default("UZS")
  paymentId   String?
  features    Json?              // Available features for this subscription
  autoRenew   Boolean            @default(false)
  cancelledAt DateTime?
  cancelReason String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("store_subscriptions")
}

model StoreNotification {
  id        String   @id @default(cuid())
  storeId   String
  title     String
  message   String
  type      String   // "info", "warning", "error", "success"
  priority  String   @default("normal") // "low", "normal", "high", "urgent"
  read      Boolean  @default(false)
  readAt    DateTime?
  data      Json?
  createdAt DateTime @default(now())

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("store_notifications")
}

model StoreReview {
  id        String   @id @default(cuid())
  storeId   String
  userId    String
  userName  String
  rating    Int      // 1-5
  title     String?
  comment   String?
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  reported  Boolean  @default(false)
  response  String?  // Store owner response
  respondedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("store_reviews")
}

model StoreFollower {
  id        String   @id @default(cuid())
  storeId   String
  userId    String
  userName  String?
  createdAt DateTime @default(now())

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, userId])
  @@map("store_followers")
}

model StoreSettings {
  id                    String  @id @default(cuid())
  storeId               String  @unique
  allowReviews          Boolean @default(true)
  requireApproval       Boolean @default(false)
  autoAcceptOrders      Boolean @default(true)
  showContactInfo       Boolean @default(true)
  showBusinessHours     Boolean @default(true)
  allowMessages         Boolean @default(true)
  enableNotifications   Boolean @default(true)
  defaultCurrency       String  @default("UZS")
  defaultLanguage       String  @default("uz")
  taxRate               Float?  @default(0)
  shippingPolicy        String?
  returnPolicy          String?
  privacyPolicy         String?
  termsOfService        String?
  customCSS             String?
  customJS              String?
  seoTitle              String?
  seoDescription        String?
  seoKeywords           String[]
  googleAnalyticsId     String?
  facebookPixelId       String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("store_settings")
}

model StorePaymentMethod {
  id          String  @id @default(cuid())
  storeId     String
  type        String  // "click", "payme", "apelsin", "bank_transfer", "cash"
  name        String
  description String?
  config      Json?   // Payment method specific configuration
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("store_payment_methods")
}

model StoreShippingMethod {
  id            String  @id @default(cuid())
  storeId       String
  name          String
  description   String?
  type          String  // "standard", "express", "pickup", "free"
  price         Decimal @db.Decimal(8, 2) @default(0)
  freeThreshold Decimal? @db.Decimal(10, 2) // Free shipping above this amount
  estimatedDays String? // "1-3", "3-5", "7-10"
  isActive      Boolean @default(true)
  sortOrder     Int     @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("store_shipping_methods")
}

model StoreBankAccount {
  id            String  @id @default(cuid())
  storeId       String
  bankName      String
  accountNumber String
  accountName   String
  routingNumber String?
  swiftCode     String?
  iban          String?
  currency      String  @default("UZS")
  isDefault     Boolean @default(false)
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("store_bank_accounts")
}

model StoreAuditLog {
  id        String   @id @default(cuid())
  storeId   String
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("store_audit_logs")
}