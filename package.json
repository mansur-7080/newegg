{
  "name": "ultramarket-backend",
  "version": "1.0.0",
  "description": "UltraMarket - Professional E-commerce Platform for Uzbekistan",
  "private": true,
  "author": "UltraMarket Team <dev@ultramarket.uz>",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/ultramarket/backend.git"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "workspaces": [
    "libs/*",
    "microservices/**/*/",
    "frontend/*"
  ],
  "scripts": {
    "dev": "concurrently \"npm run dev:databases\" \"npm run dev:services\"",
    "dev:databases": "docker-compose -f docker-compose.dev.yml up postgres mongodb redis",
    "dev:services": "lerna run dev --parallel",
    "build": "lerna run build",
    "build:production": "NODE_ENV=production lerna run build",
    "start": "lerna run start",
    "start:production": "NODE_ENV=production lerna run start",
    "test": "lerna run test",
    "test:unit": "lerna run test:unit",
    "test:integration": "lerna run test:integration",
    "test:e2e": "npm run test:e2e --prefix tests/e2e",
    "test:coverage": "lerna run test:coverage",
    "lint": "lerna run lint",
    "lint:fix": "lerna run lint:fix",
    "format": "prettier --write \"**/*.{ts,tsx,js,jsx,json,md}\"",
    "type-check": "lerna run type-check",
    "validate": "npm run lint && npm run type-check && npm run test:unit",
    "validate:production": "npm run build:production && npm run test:integration",
    "docker:build": "docker build -t ultramarket/backend:latest .",
    "docker:build:production": "docker build -t ultramarket/backend:production -f Dockerfile.prod .",
    "docker:push": "docker push ultramarket/backend:latest",
    "docker:push:production": "docker push ultramarket/backend:production",
    "docker:dev": "docker-compose -f docker-compose.dev.yml up --build",
    "docker:dev:down": "docker-compose -f docker-compose.dev.yml down -v",
    "docker:production": "docker-compose -f docker-compose.production.yml up --build -d",
    "docker:production:down": "docker-compose -f docker-compose.production.yml down",
    "k8s:deploy": "kubectl apply -f infrastructure/kubernetes/",
    "k8s:deploy:production": "kubectl apply -f infrastructure/kubernetes/production/",
    "k8s:delete": "kubectl delete -f infrastructure/kubernetes/",
    "k8s:logs": "kubectl logs -f deployment/api-gateway",
    "monitoring:start": "docker-compose -f config/docker/docker-compose.monitoring.yml up -d",
    "monitoring:stop": "docker-compose -f config/docker/docker-compose.monitoring.yml down",
    "db:migrate": "npm run db:migrate:postgres && npm run db:migrate:mongo",
    "db:migrate:postgres": "lerna run db:migrate --scope=\"*postgres*\"",
    "db:migrate:mongo": "lerna run db:migrate --scope=\"*mongo*\"",
    "db:seed": "npm run db:seed:postgres && npm run db:seed:mongo",
    "db:seed:postgres": "node scripts/database/seed-postgres.js",
    "db:seed:mongo": "node scripts/database/seed-mongo.js",
    "db:reset": "npm run db:reset:postgres && npm run db:reset:mongo",
    "db:reset:postgres": "docker exec ultramarket-postgres-prod psql -U ultramarket_user -d ultramarket_production -c \"DROP SCHEMA public CASCADE; CREATE SCHEMA public;\"",
    "db:reset:mongo": "docker exec ultramarket-mongodb-prod mongosh ultramarket_products --eval \"db.dropDatabase()\"",
    "logs": "docker-compose -f docker-compose.production.yml logs -f",
    "logs:service": "docker-compose -f docker-compose.production.yml logs -f",
    "backup": "bash scripts/backup/backup-databases.sh",
    "backup:restore": "bash scripts/backup/restore-databases.sh",
    "security:audit": "npm audit && lerna run security:audit",
    "security:scan": "node security-audit/penetration-testing.js",
    "security:fix": "npm audit fix",
    "clean": "lerna clean -y && rm -rf node_modules dist logs/*.log",
    "clean:docker": "docker system prune -af && docker volume prune -f",
    "clean:logs": "find . -name \"*.log\" -delete && mkdir -p logs",
    "docs:generate": "typedoc --out docs/api libs/shared/src/",
    "docs:serve": "http-server docs/api -p 8080",
    "health:check": "node scripts/health-check.js",
    "performance:test": "k6 run tests/performance/load-test.js",
    "performance:stress": "k6 run tests/performance/stress-test.js",
    "deploy:staging": "bash scripts/deployment/deploy-staging.sh",
    "deploy:production": "bash scripts/deployment/deploy-production.sh",
    "version:patch": "lerna version patch --yes && git push --tags",
    "version:minor": "lerna version minor --yes && git push --tags",
    "version:major": "lerna version major --yes && git push --tags",
    "precommit": "lint-staged && npm run validate",
    "prepush": "npm run test:integration",
    "postinstall": "husky install && lerna bootstrap",
    "env:validate": "node -e \"require('./libs/shared/src/config/env-validator').validateEnvironment(); console.log('✅ Environment validation passed')\"",
    "env:check:production": "node -e \"const { checkProductionReadiness } = require('./libs/shared/src/config/env-validator'); const result = checkProductionReadiness(); console.log(result.isReady ? '✅ Production ready' : '❌ Not production ready', result);\""
  },
  "devDependencies": {
    "@types/node": "^20.10.0",
    "@typescript-eslint/eslint-plugin": "^6.13.0",
    "@typescript-eslint/parser": "^6.13.0",
    "concurrently": "^8.2.2",
    "eslint": "^8.54.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-import": "^2.29.0",
    "eslint-plugin-security": "^1.7.1",
    "husky": "^8.0.3",
    "lerna": "^8.0.0",
    "lint-staged": "^15.2.0",
    "prettier": "^3.1.0",
    "typedoc": "^0.25.4",
    "typescript": "^5.3.2"
  },
  "dependencies": {
    "@sentry/node": "^7.80.1",
    "joi": "^17.11.0",
    "winston": "^3.11.0"
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write"
    ]
  },
  "keywords": [
    "ecommerce",
    "uzbekistan",
    "microservices",
    "nodejs",
    "typescript",
    "postgresql",
    "mongodb",
    "redis",
    "docker",
    "kubernetes",
    "payments",
    "click",
    "payme",
    "ultramarket"
  ],
  "homepage": "https://ultramarket.uz",
  "bugs": {
    "url": "https://github.com/ultramarket/backend/issues"
  }
}
