name: UltraMarket CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ultramarket

jobs:
  # Lint and Test
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, product-service, cart-service, order-service, payment-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint --workspace=backend/${{ matrix.service }}

      - name: Run TypeScript check
        run: npm run type-check --workspace=backend/${{ matrix.service }}

      - name: Run tests
        run: npm run test --workspace=backend/${{ matrix.service }}

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    strategy:
      matrix:
        service: [user-service, product-service, cart-service, order-service, payment-service, notification-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Database Migration
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: |
          cd backend/user-service
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, database-migration]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          kubectl apply -f k8s/staging/
          kubectl set image deployment/user-service user-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/user-service:${{ github.sha }}
          kubectl set image deployment/product-service product-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/product-service:${{ github.sha }}
          kubectl set image deployment/cart-service cart-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/cart-service:${{ github.sha }}
          kubectl set image deployment/order-service order-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/order-service:${{ github.sha }}
          kubectl set image deployment/payment-service payment-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/payment-service:${{ github.sha }}
          kubectl set image deployment/notification-service notification-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/notification-service:${{ github.sha }}

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/user-service --timeout=300s
          kubectl rollout status deployment/product-service --timeout=300s
          kubectl rollout status deployment/cart-service --timeout=300s
          kubectl rollout status deployment/order-service --timeout=300s
          kubectl rollout status deployment/payment-service --timeout=300s
          kubectl rollout status deployment/notification-service --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          # Run basic health checks
          curl -f http://staging-api.ultramarket.com/health || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, database-migration]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          kubectl apply -f k8s/production/
          kubectl set image deployment/user-service user-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/user-service:${{ github.sha }}
          kubectl set image deployment/product-service product-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/product-service:${{ github.sha }}
          kubectl set image deployment/cart-service cart-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/cart-service:${{ github.sha }}
          kubectl set image deployment/order-service order-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/order-service:${{ github.sha }}
          kubectl set image deployment/payment-service payment-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/payment-service:${{ github.sha }}
          kubectl set image deployment/notification-service notification-service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/notification-service:${{ github.sha }}

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/user-service --timeout=300s
          kubectl rollout status deployment/product-service --timeout=300s
          kubectl rollout status deployment/cart-service --timeout=300s
          kubectl rollout status deployment/order-service --timeout=300s
          kubectl rollout status deployment/payment-service --timeout=300s
          kubectl rollout status deployment/notification-service --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          # Run basic health checks
          curl -f https://api.ultramarket.com/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment completed successfully! 🚀'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          npm run test:performance
        env:
          API_URL: https://staging-api.ultramarket.com

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

  # Security Testing
  security-test:
    name: Security Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'https://staging-api.ultramarket.com'

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: zap-report/

  # Monitoring and Alerting
  monitoring-check:
    name: Monitoring Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Check service health
        run: |
          # Check all services are healthy
          services=("user-service" "product-service" "cart-service" "order-service" "payment-service" "notification-service")
          for service in "${services[@]}"; do
            if ! curl -f "https://api.ultramarket.com/$service/health"; then
              echo "Service $service is not healthy"
              exit 1
            fi
          done

      - name: Check metrics endpoint
        run: |
          # Verify Prometheus metrics are being collected
          curl -f https://api.ultramarket.com/metrics || exit 1

      - name: Check logs
        run: |
          # Verify logs are being collected
          # This would typically check with your logging service (ELK, etc.)
          echo "Log collection verification completed"

  # Documentation Update
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: |
          npm run docs:generate

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Cleanup Docker images
        run: |
          docker system prune -f
          docker image prune -f

      - name: Cleanup workspace
        run: |
          rm -rf node_modules
          rm -rf .npm

# Notifications
notifications:
  name: Notifications
  runs-on: ubuntu-latest
  needs: [lint-and-test, security-scan, build-images, deploy-production]
  if: always()
  
  steps:
    - name: Notify on failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: 'Deployment failed! Please check the logs. ❌'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify on success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: 'All checks passed! ✅'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}