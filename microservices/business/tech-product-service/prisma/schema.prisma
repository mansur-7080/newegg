// This is the complete Prisma schema for Tech Product Service
// Generator and datasource configuration
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("TECH_PRODUCT_DATABASE_URL")
}

// Enums
enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  OUT_OF_STOCK
  DISCONTINUED
}

enum ProductCondition {
  NEW
  REFURBISHED
  USED
  OPEN_BOX
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

enum BrandStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum SpecificationType {
  TEXT
  NUMBER
  BOOLEAN
  SELECT
  MULTI_SELECT
  RANGE
}

enum UnitType {
  GB
  TB
  GHZ
  MHZ
  INCH
  CM
  MM
  KG
  G
  WATT
  VOLT
  AMP
  PIECE
  PERCENT
}

// Models
model Product {
  id              String           @id @default(cuid())
  sku             String           @unique
  name            String
  slug            String           @unique
  description     String?
  shortDescription String?
  brandId         String
  categoryId      String
  storeId         String
  price           Decimal          @db.Decimal(10, 2)
  originalPrice   Decimal?         @db.Decimal(10, 2)
  costPrice       Decimal?         @db.Decimal(10, 2)
  currency        String           @default("UZS")
  status          ProductStatus    @default(DRAFT)
  condition       ProductCondition @default(NEW)
  weight          Float?
  dimensions      Json?            // {length, width, height}
  warranty        String?
  model           String?
  modelYear       Int?
  isDigital       Boolean          @default(false)
  isFeatured      Boolean          @default(false)
  isOnSale        Boolean          @default(false)
  tags            String[]
  metaTitle       String?
  metaDescription String?
  seoKeywords     String[]
  viewCount       Int              @default(0)
  salesCount      Int              @default(0)
  rating          Float?           @default(0)
  reviewCount     Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  brand           Brand            @relation(fields: [brandId], references: [id])
  category        Category         @relation(fields: [categoryId], references: [id])
  images          ProductImage[]
  specifications  ProductSpecification[]
  variants        ProductVariant[]
  inventory       ProductInventory?
  reviews         ProductReview[]
  questions       ProductQuestion[]
  compatibilities ProductCompatibility[]
  bundles         ProductBundle[]  @relation("BundleProducts")
  bundleItems     ProductBundle[]  @relation("BundleItems")

  @@map("products")
}

model Brand {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String?
  logo        String?
  website     String?
  country     String?
  status      BrandStatus @default(PENDING)
  isVerified  Boolean     @default(false)
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  products Product[]

  @@map("brands")
}

model Category {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  description String?
  icon        String?
  image       String?
  parentId    String?
  level       Int            @default(0)
  sortOrder   Int            @default(0)
  status      CategoryStatus @default(ACTIVE)
  isVisible   Boolean        @default(true)
  metadata    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  parent      Category?      @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]     @relation("CategoryHierarchy")
  products    Product[]
  specifications CategorySpecification[]

  @@map("categories")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  title     String?
  isPrimary Boolean @default(false)
  sortOrder Int     @default(0)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Specification {
  id          String            @id @default(cuid())
  name        String            @unique
  displayName String
  description String?
  type        SpecificationType @default(TEXT)
  unit        UnitType?
  options     String[]          // For SELECT and MULTI_SELECT types
  isRequired  Boolean           @default(false)
  isFilterable Boolean          @default(false)
  sortOrder   Int               @default(0)
  metadata    Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  categorySpecs CategorySpecification[]
  productSpecs  ProductSpecification[]

  @@map("specifications")
}

model CategorySpecification {
  id              String @id @default(cuid())
  categoryId      String
  specificationId String
  isRequired      Boolean @default(false)
  sortOrder       Int     @default(0)
  createdAt       DateTime @default(now())

  // Relations
  category      Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  specification Specification @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  @@unique([categoryId, specificationId])
  @@map("category_specifications")
}

model ProductSpecification {
  id              String @id @default(cuid())
  productId       String
  specificationId String
  value           String
  numericValue    Float?
  booleanValue    Boolean?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  specification Specification @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  @@unique([productId, specificationId])
  @@map("product_specifications")
}

model ProductVariant {
  id        String @id @default(cuid())
  productId String
  sku       String @unique
  name      String
  price     Decimal @db.Decimal(10, 2)
  attributes Json   // {color: "red", size: "large", storage: "256GB"}
  stock     Int     @default(0)
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductInventory {
  id                String   @id @default(cuid())
  productId         String   @unique
  quantity          Int      @default(0)
  reservedQuantity  Int      @default(0)
  lowStockThreshold Int      @default(10)
  trackQuantity     Boolean  @default(true)
  allowBackorder    Boolean  @default(false)
  location          String?
  lastRestocked     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_inventory")
}

model ProductReview {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5
  title     String?
  comment   String?
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  reported  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
}

model ProductQuestion {
  id        String   @id @default(cuid())
  productId String
  userId    String
  question  String
  answer    String?
  answeredBy String?
  answeredAt DateTime?
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_questions")
}

model ProductCompatibility {
  id               String @id @default(cuid())
  productId        String
  compatibleWithId String
  type             String // "accessory", "upgrade", "replacement"
  description      String?
  createdAt        DateTime @default(now())

  // Relations
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, compatibleWithId])
  @@map("product_compatibilities")
}

model ProductBundle {
  id          String  @id @default(cuid())
  name        String
  description String?
  discount    Decimal @db.Decimal(5, 2) // percentage
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[] @relation("BundleProducts")
  bundleItems Product[] @relation("BundleItems")

  @@map("product_bundles")
}

model TechSpecTemplate {
  id          String @id @default(cuid())
  name        String @unique
  categoryId  String
  description String?
  template    Json   // Template structure for specifications
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tech_spec_templates")
}

model ProductComparison {
  id        String   @id @default(cuid())
  userId    String
  name      String?
  productIds String[] // Array of product IDs to compare
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_comparisons")
}

model PriceHistory {
  id        String   @id @default(cuid())
  productId String
  price     Decimal  @db.Decimal(10, 2)
  currency  String   @default("UZS")
  source    String?  // "manual", "automated", "import"
  reason    String?  // "promotion", "cost_change", "market_adjustment"
  createdAt DateTime @default(now())

  @@map("price_history")
}