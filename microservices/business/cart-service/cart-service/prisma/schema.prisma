// This is the complete Prisma schema for Cart Service
// Generator and datasource configuration
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("CART_DATABASE_URL")
}

// Enums
enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED
  EXPIRED
}

enum CartItemStatus {
  ACTIVE
  REMOVED
  OUT_OF_STOCK
  UNAVAILABLE
}

enum WishlistStatus {
  ACTIVE
  ARCHIVED
}

enum ComparisonStatus {
  ACTIVE
  ARCHIVED
}

// Models
model Cart {
  id            String     @id @default(cuid())
  userId        String?    // Null for guest carts
  sessionId     String?    // For guest users
  status        CartStatus @default(ACTIVE)
  currency      String     @default("UZS")
  subtotal      Decimal    @db.Decimal(10, 2) @default(0)
  tax           Decimal    @db.Decimal(10, 2) @default(0)
  shipping      Decimal    @db.Decimal(10, 2) @default(0)
  discount      Decimal    @db.Decimal(10, 2) @default(0)
  total         Decimal    @db.Decimal(10, 2) @default(0)
  itemCount     Int        @default(0)
  
  // Discount information
  couponCode    String?
  discountType  String?    // "percentage", "fixed", "shipping"
  discountValue Decimal?   @db.Decimal(10, 2)
  
  // Shipping information
  shippingMethod String?
  estimatedDelivery DateTime?
  
  // Metadata
  metadata      Json?
  notes         String?
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  expiresAt     DateTime?
  convertedAt   DateTime?
  abandonedAt   DateTime?

  // Relations
  items         CartItem[]
  savedItems    SavedCartItem[]

  @@map("carts")
}

model CartItem {
  id            String         @id @default(cuid())
  cartId        String
  productId     String
  variantId     String?
  storeId       String
  
  // Product details (cached for performance)
  productName   String
  productSlug   String
  productImage  String?
  productSku    String
  
  // Variant details
  variantName   String?
  variantSku    String?
  attributes    Json?          // {color: "red", size: "large"}
  
  // Pricing
  unitPrice     Decimal        @db.Decimal(10, 2)
  originalPrice Decimal?       @db.Decimal(10, 2)
  salePrice     Decimal?       @db.Decimal(10, 2)
  quantity      Int
  total         Decimal        @db.Decimal(10, 2)
  
  // Status and availability
  status        CartItemStatus @default(ACTIVE)
  isAvailable   Boolean        @default(true)
  stockQuantity Int?
  
  // Timestamps
  addedAt       DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  removedAt     DateTime?

  // Relations
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, variantId])
  @@map("cart_items")
}

model SavedCartItem {
  id          String   @id @default(cuid())
  cartId      String
  productId   String
  variantId   String?
  storeId     String
  
  // Product details
  productName String
  productSlug String
  productImage String?
  productSku  String
  
  // Variant details
  variantName String?
  variantSku  String?
  attributes  Json?
  
  // Pricing at time of saving
  unitPrice   Decimal  @db.Decimal(10, 2)
  quantity    Int
  
  // Save reason
  reason      String?  // "save_for_later", "out_of_stock", "price_watch"
  notes       String?
  
  // Timestamps
  savedAt     DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("saved_cart_items")
}

model Wishlist {
  id          String         @id @default(cuid())
  userId      String
  name        String         @default("My Wishlist")
  description String?
  isPublic    Boolean        @default(false)
  status      WishlistStatus @default(ACTIVE)
  itemCount   Int            @default(0)
  
  // Sharing
  shareToken  String?        @unique
  shareUrl    String?
  
  // Timestamps
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  items WishlistItem[]

  @@map("wishlists")
}

model WishlistItem {
  id          String   @id @default(cuid())
  wishlistId  String
  productId   String
  variantId   String?
  storeId     String
  
  // Product details (cached)
  productName String
  productSlug String
  productImage String?
  productSku  String
  
  // Variant details
  variantName String?
  variantSku  String?
  attributes  Json?
  
  // Pricing at time of addition
  price       Decimal  @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2)
  
  // Availability tracking
  isAvailable Boolean  @default(true)
  inStock     Boolean  @default(true)
  
  // Priority and notes
  priority    Int      @default(0) // 0=low, 1=medium, 2=high
  notes       String?
  
  // Timestamps
  addedAt     DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId, variantId])
  @@map("wishlist_items")
}

model ProductComparison {
  id          String           @id @default(cuid())
  userId      String?
  sessionId   String?          // For guest users
  name        String?
  status      ComparisonStatus @default(ACTIVE)
  itemCount   Int              @default(0)
  
  // Metadata
  metadata    Json?
  
  // Timestamps
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  items ComparisonItem[]

  @@map("product_comparisons")
}

model ComparisonItem {
  id           String   @id @default(cuid())
  comparisonId String
  productId    String
  storeId      String
  
  // Product details (cached)
  productName  String
  productSlug  String
  productImage String?
  productSku   String
  
  // Pricing
  price        Decimal  @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2)
  
  // Specifications (cached for comparison)
  specifications Json?
  
  // Order in comparison
  sortOrder    Int      @default(0)
  
  // Timestamps
  addedAt      DateTime @default(now())

  // Relations
  comparison ProductComparison @relation(fields: [comparisonId], references: [id], onDelete: Cascade)

  @@unique([comparisonId, productId])
  @@map("comparison_items")
}

model CartSession {
  id          String   @id @default(cuid())
  sessionId   String   @unique
  userId      String?
  ipAddress   String?
  userAgent   String?
  deviceInfo  Json?
  location    Json?
  
  // Session data
  cartData    Json?    // Cached cart information
  preferences Json?    // User preferences during session
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime

  @@map("cart_sessions")
}

model CartAbandonment {
  id              String   @id @default(cuid())
  cartId          String   @unique
  userId          String?
  email           String?
  phone           String?
  
  // Cart details at abandonment
  itemCount       Int
  totalValue      Decimal  @db.Decimal(10, 2)
  currency        String   @default("UZS")
  
  // Abandonment analysis
  abandonedAt     DateTime
  lastActivity    DateTime
  timeSpent       Int?     // seconds
  pageExits       Json?    // Pages where user exited
  
  // Recovery attempts
  recoveryEmails  Int      @default(0)
  recoverySms     Int      @default(0)
  lastRecoveryAt  DateTime?
  
  // Recovery status
  isRecovered     Boolean  @default(false)
  recoveredAt     DateTime?
  recoveryMethod  String?  // "email", "sms", "retargeting", "direct"
  
  // Metadata
  metadata        Json?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("cart_abandonments")
}

model CartCoupon {
  id            String   @id @default(cuid())
  code          String   @unique
  name          String
  description   String?
  
  // Discount details
  discountType  String   // "percentage", "fixed", "shipping"
  discountValue Decimal  @db.Decimal(10, 2)
  maxDiscount   Decimal? @db.Decimal(10, 2)
  minOrderValue Decimal? @db.Decimal(10, 2)
  
  // Usage limits
  usageLimit    Int?     // Total usage limit
  usageCount    Int      @default(0)
  userLimit     Int?     // Per user limit
  
  // Validity
  isActive      Boolean  @default(true)
  startsAt      DateTime?
  expiresAt     DateTime?
  
  // Conditions
  applicableStores    String[] // Store IDs
  applicableProducts  String[] // Product IDs
  applicableCategories String[] // Category IDs
  
  // Metadata
  metadata      Json?
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("cart_coupons")
}

model CartCouponUsage {
  id        String   @id @default(cuid())
  couponId  String
  cartId    String
  userId    String?
  
  // Usage details
  discountAmount Decimal @db.Decimal(10, 2)
  orderTotal     Decimal @db.Decimal(10, 2)
  
  // Timestamps
  usedAt    DateTime @default(now())

  @@unique([couponId, cartId])
  @@map("cart_coupon_usage")
}

model CartAnalytics {
  id              String   @id @default(cuid())
  date            DateTime @db.Date
  
  // Daily metrics
  cartsCreated    Int      @default(0)
  cartsAbandoned  Int      @default(0)
  cartsConverted  Int      @default(0)
  itemsAdded      Int      @default(0)
  itemsRemoved    Int      @default(0)
  
  // Value metrics
  totalCartValue  Decimal  @db.Decimal(12, 2) @default(0)
  avgCartValue    Decimal  @db.Decimal(10, 2) @default(0)
  conversionRate  Float    @default(0)
  abandonmentRate Float    @default(0)
  
  // Popular products
  topProducts     Json?    // Array of {productId, addCount, removeCount}
  topStores       Json?    // Array of {storeId, cartCount, itemCount}
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([date])
  @@map("cart_analytics")
}