version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ultramarket-postgres
    environment:
      POSTGRES_DB: ultramarket_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/docker/postgres/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: ultramarket-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: ultramarket_dev
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
      - ./config/docker/mongodb/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ultramarket-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ultramarket-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./config/docker/redis/config/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ultramarket-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: ultramarket-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - ultramarket-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ultramarket-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - ultramarket-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ultramarket-grafana
    ports:
      - '3001:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - ultramarket-network

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ultramarket-jaeger
    ports:
      - '16686:16686'
      - '14268:14268'
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ultramarket-network

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: microservices/core/api-gateway/Dockerfile.dev
    container_name: ultramarket-api-gateway
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - CART_SERVICE_URL=http://cart-service:3005
      - PAYMENT_SERVICE_URL=http://payment-service:3006
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - postgres
      - mongodb
    networks:
      - ultramarket-network
    volumes:
      - ./microservices/core/api-gateway:/app
      - /app/node_modules
    command: npm run dev

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: microservices/core/auth-service/Dockerfile.dev
    container_name: ultramarket-auth-service
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ultramarket_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
    depends_on:
      - postgres
      - redis
    networks:
      - ultramarket-network
    volumes:
      - ./microservices/core/auth-service:/app
      - /app/node_modules
    command: npm run dev

  # User Service
  user-service:
    build:
      context: .
      dockerfile: microservices/core/user-service/Dockerfile.dev
    container_name: ultramarket-user-service
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ultramarket_dev
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - ultramarket-network
    volumes:
      - ./microservices/core/user-service:/app
      - /app/node_modules
    command: npm run dev

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: microservices/business/product-service/Dockerfile.dev
    container_name: ultramarket-product-service
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MONGODB_URL=mongodb://root:password@mongodb:27017/ultramarket_dev?authSource=admin
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - mongodb
      - redis
      - elasticsearch
    networks:
      - ultramarket-network
    volumes:
      - ./microservices/business/product-service:/app
      - /app/node_modules
    command: npm run dev

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: microservices/business/order-service/Dockerfile.dev
    container_name: ultramarket-order-service
    ports:
      - '3004:3004'
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ultramarket_dev
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - ultramarket-network
    volumes:
      - ./microservices/business/order-service:/app
      - /app/node_modules
    command: npm run dev

  # Cart Service
  cart-service:
    build:
      context: .
      dockerfile: microservices/business/cart-service/Dockerfile.dev
    container_name: ultramarket-cart-service
    ports:
      - '3005:3005'
    environment:
      - NODE_ENV=development
      - PORT=3005
      - REDIS_URL=redis://redis:6379
      - PRODUCT_SERVICE_URL=http://product-service:3003
    depends_on:
      - redis
    networks:
      - ultramarket-network
    volumes:
      - ./microservices/business/cart-service:/app
      - /app/node_modules
    command: npm run dev

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: microservices/business/payment-service/Dockerfile.dev
    container_name: ultramarket-payment-service
    ports:
      - '3006:3006'
    environment:
      - NODE_ENV=development
      - PORT=3006
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ultramarket_dev
      - REDIS_URL=redis://redis:6379
      - CLICK_MERCHANT_ID=your-click-merchant-id
      - CLICK_SECRET_KEY=your-click-secret-key
      - PAYME_MERCHANT_ID=your-payme-merchant-id
      - PAYME_SECRET_KEY=your-payme-secret-key
    depends_on:
      - postgres
      - redis
    networks:
      - ultramarket-network
    volumes:
      - ./microservices/business/payment-service:/app
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  ultramarket-network:
    driver: bridge
