import { RedisClientType } from 'redis';
import { v4 as uuidv4 } from 'uuid';
import axios from 'axios';
import { CartRepository } from '../repositories/cart.repository';
import { logger } from '../utils/logger';

/**
 * Professional Cart Service Implementation
 * Handles all cart-related business logic with caching
 */
export class CartService {
  private cartRepository: CartRepository;
  private redisClient: RedisClientType;
  private readonly CACHE_TTL = 3600; // 1 hour in seconds

  constructor(cartRepository: CartRepository, redisClient: RedisClientType) {
    this.cartRepository = cartRepository;
    this.redisClient = redisClient;
  }

  /**
   * Gets a user's cart, either from cache or database
   */
  async getCart(userId: string): Promise<Cart> {
    try {
      // Try to get cart from cache first
      const cachedCart = await this.redisClient.get(this.getCacheKey(userId));
      if (cachedCart) {
        return JSON.parse(cachedCart);
      }

      // If not in cache, fetch from database
      const dbCart = await this.cartRepository.getCart(userId);

      if (dbCart) {
        const cart: Cart = this.mapDatabaseCartToModel(dbCart);
        
        // Cache the result
        await this.redisClient.setEx(this.getCacheKey(userId), this.CACHE_TTL, JSON.stringify(cart));
        
        return cart;
      }

      // If no cart found, create a new empty one
      const emptyCart: Cart = {
        id: uuidv4(),
        userId,
        items: [],
        summary: {
          itemCount: 0,
          subtotal: 0,
          tax: 0,
          shipping: 0,
          discount: 0,
          total: 0,
        },
        updatedAt: new Date().toISOString(),
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
      };

      // Cache the result
      await this.redisClient.setEx(this.getCacheKey(userId), this.CACHE_TTL, JSON.stringify(emptyCart));

      return emptyCart;
    } catch (error) {
      logger.error('Error getting cart:', error);
      throw error;
    }
  }

  /**
   * Add an item to the cart
   */
  async addItem(userId: string, item: CartItemInput): Promise<Cart> {
    try {
      // Get current cart
      const cart = await this.getCart(userId);

      // Validate product availability
      const validation = await this.validateProduct(item.productId, item.quantity);
      if (!validation.isValid) {
        throw new Error(validation.error || 'Invalid product');
      }

      // Check if item already exists in cart
      const existingItemIndex = cart.items.findIndex((i) => i.productId === item.productId);

      if (existingItemIndex >= 0) {
        // Update existing item
        const existingItem = cart.items[existingItemIndex];
        cart.items[existingItemIndex] = {
          ...existingItem,
          quantity: existingItem.quantity + item.quantity,
          updatedAt: new Date().toISOString(),
        };
      } else {
        // Add new item
        cart.items.push({
          id: uuidv4(),
          productId: item.productId,
          productName: item.productName,
          price: item.price,
          originalPrice: item.originalPrice,
          quantity: item.quantity,
          maxQuantity: validation.maxQuantity,
          image: item.image,
          sku: item.sku,
          variant: item.variant,
          addedAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        });
      }

      // Update summary
      this.updateCartSummary(cart);

      // Update cache
      await this.redisClient.setEx(this.getCacheKey(userId), this.CACHE_TTL, JSON.stringify(cart));

      logger.info(`Item added to cart for user ${userId}: ${item.productId}`);
      return cart;
    } catch (error) {
      logger.error('Error adding item to cart:', error);
      throw error;
    }
  }

  /**
   * Update item quantity in cart
   */
  async updateItemQuantity(userId: string, productId: string, quantity: number): Promise<Cart> {
    try {
      if (quantity < 1) {
        return this.removeItem(userId, productId);
      }

      // Get current cart
      const cart = await this.getCart(userId);

      // Find item
      const itemIndex = cart.items.findIndex((i) => i.productId === productId);
      if (itemIndex === -1) {
        throw new Error('Item not found in cart');
      }

      // Validate product availability
      const validation = await this.validateProduct(productId, quantity);
      if (!validation.isValid) {
        throw new Error(validation.error || 'Invalid product');
      }

      // Update quantity
      cart.items[itemIndex].quantity = quantity;
      cart.items[itemIndex].updatedAt = new Date().toISOString();

      // Update summary
      this.updateCartSummary(cart);

      // Update cache
      await this.redisClient.setEx(this.getCacheKey(userId), this.CACHE_TTL, JSON.stringify(cart));

      // Persist to database if needed
      // await this.cartRepository.updateCart(cart);

      return cart;
    } catch (error) {
      logger.error('Error updating cart item:', error);
      throw error;
    }
  }

  /**
   * Remove item from cart
   */
  async removeItem(userId: string, productId: string): Promise<Cart> {
    try {
      // Get current cart
      const cart = await this.getCart(userId);

      // Filter out the item
      cart.items = cart.items.filter((i) => i.productId !== productId);

      // Update summary
      this.updateCartSummary(cart);

      // Update cache
      await this.redisClient.setEx(this.getCacheKey(userId), this.CACHE_TTL, JSON.stringify(cart));

      // Persist to database if needed
      // await this.cartRepository.updateCart(cart);

      return cart;
    } catch (error) {
      logger.error('Error removing cart item:', error);
      throw error;
    }
  }

  /**
   * Clear all items from cart
   */
  async clearCart(userId: string): Promise<Cart> {
    try {
      // Get current cart
      const cart = await this.getCart(userId);

      // Clear items
      cart.items = [];

      // Update summary
      this.updateCartSummary(cart);

      // Update cache
      await this.redisClient.setEx(this.getCacheKey(userId), this.CACHE_TTL, JSON.stringify(cart));

      // Persist to database if needed
      // await this.cartRepository.clearCartItems(cart.id);

      return cart;
    } catch (error) {
      logger.error('Error clearing cart:', error);
      throw error;
    }
  }

  /**
   * Apply a coupon to the cart
   */
  async applyCoupon(
    userId: string, 
    couponCode: string, 
    couponDetails: {
      type?: 'percentage' | 'fixed';
      value?: number;
      minimumPurchase?: number;
      maxDiscount?: number;
    } = {}
  ): Promise<Cart> {
    try {
      // Get current cart
      const cart = await this.getCart(userId);

      // Validate coupon (real implementation would call coupon service)
      const { type = 'percentage', value = 10, minimumPurchase = 0, maxDiscount = 500 } = couponDetails;

      // Check minimum purchase
      if (cart.summary.subtotal < minimumPurchase) {
        throw new Error(`Minimum purchase amount of ${minimumPurchase} required to apply this coupon`);
      }

      // Calculate discount
      let discount = 0;
      if (type === 'percentage') {
        discount = (cart.summary.subtotal * value) / 100;
      } else {
        discount = value;
      }

      // Apply max discount cap
      discount = Math.min(discount, maxDiscount);

      // Apply discount
      cart.couponCode = couponCode;
      cart.couponDiscount = discount;

      // Update summary
      this.updateCartSummary(cart);

      // Update cache
      await this.redisClient.setEx(this.getCacheKey(userId), this.CACHE_TTL, JSON.stringify(cart));

      // Persist to database if needed
      // await this.cartRepository.updateCart(cart);

      return cart;
    } catch (error) {
      logger.error('Error applying coupon:', error);
      throw error;
    }
  }

  // Helper functions
  private getCacheKey(userId: string): string {
    return `cart:${userId}`;
  }

  /**
   * Update cart summary calculations
   */
  private updateCartSummary(cart: Cart): void {
    const subtotal = cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const taxRate = 0.08; // 8% tax
    const tax = subtotal * taxRate;
    const shipping = subtotal > 75 ? 0 : 9.99; // Free shipping over $75
    const itemDiscount = 0; // Could implement item-specific discounts
    const couponDiscount = cart.couponDiscount || 0;
    const totalDiscount = itemDiscount + couponDiscount;
    const total = Math.max(0, subtotal + tax + shipping - totalDiscount);

    cart.summary = {
      itemCount: cart.items.length,
      subtotal,
      tax,
      shipping,
      discount: totalDiscount,
      total,
    };

    cart.updatedAt = new Date().toISOString();
  }

  /**
   * Call product service to validate product
   */
  private async validateProduct(productId: string, quantity: number): Promise<ProductValidation> {
    try {
      // In a real implementation, call product service
      // Here, we'll just mock a successful response
      return {
        productId,
        isValid: true,
        currentPrice: 0,
        inStock: true,
        maxQuantity: 100,
      };
    } catch (error) {
      logger.error('Error validating product:', error);
      return {
        productId,
        isValid: false,
        error: 'Failed to validate product',
      };
    }
  }

  /**
   * Map database model to service model
   */
  private mapDatabaseCartToModel(dbCart: any): Cart {
    return {
      id: dbCart.id,
      userId: dbCart.userId,
      items: dbCart.items.map((item: any) => ({
        id: item.id,
        productId: item.productId,
        productName: item.productName,
        price: item.price,
        originalPrice: item.originalPrice,
        quantity: item.quantity,
        maxQuantity: item.maxQuantity,
        image: item.image,
        sku: item.sku,
        variant: item.variant,
        addedAt: item.addedAt,
        updatedAt: item.updatedAt,
      })),
      couponCode: dbCart.couponCode,
      couponDiscount: dbCart.couponDiscount,
      summary: {
        itemCount: dbCart.items.length,
        subtotal: dbCart.summary.subtotal,
        tax: dbCart.summary.tax,
        shipping: dbCart.summary.shipping,
        discount: dbCart.summary.discount,
        total: dbCart.summary.total,
      },
      createdAt: dbCart.createdAt,
      updatedAt: dbCart.updatedAt,
      expiresAt: dbCart.expiresAt,
    };
  }
}

/**
 * Type Definitions
 */
export interface CartItemInput {
  productId: string;
  productName: string;
  price: number;
  originalPrice?: number;
  quantity: number;
  image?: string;
  sku?: string;
  variant?: string;
}

export interface CartItem {
  id: string;
  productId: string;
  productName: string;
  price: number;
  originalPrice?: number;
  quantity: number;
  maxQuantity?: number;
  image?: string;
  sku?: string;
  variant?: string;
  addedAt: string;
  updatedAt: string;
}

export interface CartSummary {
  itemCount: number;
  subtotal: number;
  tax: number;
  shipping: number;
  discount: number;
  total: number;
}

export interface Cart {
  id: string;
  userId: string;
  items: CartItem[];
  summary: CartSummary;
  couponCode?: string;
  couponDiscount?: number;
  createdAt?: string;
  updatedAt: string;
  expiresAt?: string;
}

export interface ProductValidation {
  productId: string;
  isValid: boolean;
  currentPrice?: number;
  inStock?: boolean;
  maxQuantity?: number;
  error?: string;
}
