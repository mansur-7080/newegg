// Enhanced Prisma schema with device tracking

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  role            UserRole  @default(CUSTOMER)
  isEmailVerified Boolean   @default(false)
  isPhoneVerified Boolean   @default(false)
  status          UserStatus @default(ACTIVE)
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  refreshTokens   RefreshToken[]
  passwordResets  PasswordReset[]
  auditLogs       AuditLog[]
  securityLogs    SecurityLog[]
  devices         UserDevice[]  // Added relation to user devices

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)  // Add isRevoked field
  deviceId  String?  // Add device ID for tracking
  userAgent String?  // Add user agent information
  ip        String?  // Add IP address information

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// New model for device tracking
model UserDevice {
  id             String    @id @default(cuid())
  userId         String
  deviceId       String    // Unique identifier for the device
  userAgent      String
  browser        String?
  browserVersion String?
  os             String?
  osVersion      String?
  device         String?
  ip             String?
  lastAccessed   DateTime
  isTrusted      Boolean   @default(false)
  createdAt      DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@map("user_devices")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model AuditLog {
  id        String   @id @default(cuid())
  event     String
  userId    String?
  email     String?
  ipAddress String?
  userAgent String?
  action    String?
  resource  String?
  details   Json?
  metadata  Json?
  timestamp DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model SecurityLog {
  id        String   @id @default(cuid())
  userId    String?
  event     String
  ipAddress String?
  userAgent String?
  success   Boolean  @default(false)
  details   Json?
  timestamp DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("email_verifications")
}

// Enums
enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
  SUPER_ADMIN

  @@map("user_role")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED

  @@map("user_status")
}
