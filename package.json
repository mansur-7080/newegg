{
  "name": "ultramarket-backend",
  "version": "1.0.0",
  "description": "UltraMarket - Professional E-commerce Platform Backend for Uzbekistan",
  "main": "dist/main.js",
  "scripts": {
    "build": "node build.js",
    "start": "node dist/main.js",
    "start:dev": "concurrently \"npm run start:databases\" \"npm run start:services:dev\"",
    "start:prod": "npm run build && npm run start:services:prod",
    "start:databases": "docker-compose -f config/docker/docker-compose.databases.yml up -d",
    "start:services:dev": "concurrently \"npm run start:auth:dev\" \"npm run start:gateway:dev\" \"npm run start:product:dev\" \"npm run start:order:dev\" \"npm run start:payment:dev\" \"npm run start:search:dev\" \"npm run start:file:dev\" \"npm run start:notification:dev\"",
    "start:services:prod": "concurrently \"npm run start:auth:prod\" \"npm run start:gateway:prod\" \"npm run start:product:prod\" \"npm run start:order:prod\" \"npm run start:payment:prod\" \"npm run start:search:prod\" \"npm run start:file:prod\" \"npm run start:notification:prod\"",
    "start:auth:dev": "cd microservices/core/auth-service && npm run start:dev",
    "start:auth:prod": "cd microservices/core/auth-service && npm run start:prod",
    "start:gateway:dev": "cd microservices/core/api-gateway && npm run start:dev",
    "start:gateway:prod": "cd microservices/core/api-gateway && npm run start:prod",
    "start:product:dev": "cd microservices/business/product-service && npm run start:dev",
    "start:product:prod": "cd microservices/business/product-service && npm run start:prod",
    "start:order:dev": "cd microservices/business/order-service && npm run start:dev",
    "start:order:prod": "cd microservices/business/order-service && npm run start:prod",
    "start:payment:dev": "cd microservices/business/payment-service && npm run start:dev",
    "start:payment:prod": "cd microservices/business/payment-service && npm run start:prod",
    "start:search:dev": "cd microservices/platform/search-service && npm run start:dev",
    "start:search:prod": "cd microservices/platform/search-service && npm run start:prod",
    "start:file:dev": "cd microservices/platform/file-service && npm run start:dev",
    "start:file:prod": "cd microservices/platform/file-service && npm run start:prod",
    "start:notification:dev": "cd microservices/platform/notification-service && npm run start:dev",
    "start:notification:prod": "cd microservices/platform/notification-service && npm run start:prod",
    "stop:databases": "docker-compose -f config/docker/docker-compose.databases.yml down",
    "restart:databases": "npm run stop:databases && npm run start:databases",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:integration": "jest --config jest.integration.config.js",
    "test:e2e": "jest --config jest.e2e.config.js",
    "test:load": "k6 run tests/performance/load-test.js",
    "test:stress": "k6 run tests/performance/stress-test.js",
    "lint": "eslint \"**/*.{ts,js}\" --fix",
    "format": "prettier --write \"**/*.{ts,js,json,md}\"",
    "setup": "chmod +x scripts/setup/complete-backend-setup.sh && ./scripts/setup/complete-backend-setup.sh",
    "setup:dev": "npm run setup -- --dev",
    "setup:prod": "npm run setup -- --prod",
    "setup:test": "npm run setup -- --with-tests",
    "health": "curl -f http://localhost:3000/health || exit 1",
    "logs": "docker-compose -f config/docker/docker-compose.databases.yml logs -f",
    "logs:auth": "cd microservices/core/auth-service && npm run logs",
    "logs:gateway": "cd microservices/core/api-gateway && npm run logs",
    "logs:payment": "cd microservices/business/payment-service && npm run logs",
    "backup": "chmod +x infrastructure/disaster-recovery/automated-backup.sh && ./infrastructure/disaster-recovery/automated-backup.sh",
    "restore": "chmod +x infrastructure/disaster-recovery/restore-backup.sh && ./infrastructure/disaster-recovery/restore-backup.sh",
    "migrate": "npm run migrate:postgres && npm run migrate:mongo",
    "migrate:postgres": "docker exec ultramarket_postgres psql -U ultramarket_user -d ultramarket_db -f /docker-entrypoint-initdb.d/init.sql",
    "migrate:mongo": "docker exec ultramarket_mongo mongo ultramarket_db --eval \"load('/docker-entrypoint-initdb.d/init.js')\"",
    "seed": "npm run seed:postgres && npm run seed:mongo && npm run seed:elasticsearch",
    "seed:postgres": "node scripts/database/seed-postgres.js",
    "seed:mongo": "node scripts/database/seed-mongo.js",
    "seed:elasticsearch": "node scripts/database/seed-elasticsearch.js",
    "docker:build": "docker build -t ultramarket/backend:latest .",
    "docker:push": "docker push ultramarket/backend:latest",
    "docker:run": "docker run -p 3000:3000 ultramarket/backend:latest",
    "k8s:deploy": "kubectl apply -f infrastructure/kubernetes/",
    "k8s:delete": "kubectl delete -f infrastructure/kubernetes/",
    "k8s:logs": "kubectl logs -f deployment/api-gateway",
    "monitoring:start": "docker-compose -f infrastructure/monitoring/docker-compose.monitoring.yml up -d",
    "monitoring:stop": "docker-compose -f infrastructure/monitoring/docker-compose.monitoring.yml down",
    "clean": "rm -rf dist node_modules */node_modules */*/node_modules",
    "clean:docker": "docker system prune -af && docker volume prune -f",
    "clean:logs": "find . -name \"*.log\" -delete",
    "security:audit": "npm audit && npm run security:scan",
    "security:scan": "node security-audit/penetration-testing.js",
    "docs:generate": "typedoc --out docs/api src/",
    "docs:serve": "http-server docs/api -p 8080",
    "version:patch": "npm version patch && git push --tags",
    "version:minor": "npm version minor && git push --tags",
    "version:major": "npm version major && git push --tags",
    "precommit": "npm run lint && npm run test",
    "prepush": "npm run test:integration",
    "postinstall": "npm run build"
  },
  "keywords": [
    "ecommerce",
    "uzbekistan",
    "microservices",
    "nestjs",
    "typescript",
    "click",
    "payme",
    "elasticsearch",
    "redis",
    "postgresql",
    "mongodb",
    "docker",
    "kubernetes"
  ],
  "author": {
    "name": "UltraMarket Team",
    "email": "dev@ultramarket.uz",
    "url": "https://ultramarket.uz"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/ultramarket/backend.git"
  },
  "bugs": {
    "url": "https://github.com/ultramarket/backend/issues"
  },
  "homepage": "https://ultramarket.uz",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "dependencies": {
    "@elastic/elasticsearch": "^8.8.0",
    "@nestjs/cache-manager": "^2.0.0",
    "@nestjs/common": "^10.0.0",
    "@nestjs/config": "^3.0.0",
    "@nestjs/core": "^10.0.0",
    "@nestjs/jwt": "^10.0.0",
    "@nestjs/microservices": "^10.0.0",
    "@nestjs/mongoose": "^10.0.0",
    "@nestjs/passport": "^10.0.0",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/platform-socket.io": "^10.0.0",
    "@nestjs/schedule": "^3.0.0",
    "@nestjs/swagger": "^7.0.0",
    "@nestjs/throttler": "^4.0.0",
    "@nestjs/typeorm": "^10.0.0",
    "@nestjs/websockets": "^10.0.0",
    "@types/ioredis": "^4.28.10",
    "@types/joi": "^17.2.3",
    "@types/winston": "^2.4.4",
    "axios": "^1.4.0",
    "bcryptjs": "^2.4.3",
    "bull": "^4.10.4",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.0",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "cron": "^2.3.1",
    "crypto": "^1.0.1",
    "dotenv": "^16.3.1",
    "express": "^4.21.2",
    "express-rate-limit": "^6.7.1",
    "helmet": "^7.0.0",
    "ioredis": "^5.6.1",
    "joi": "^17.13.3",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "minio": "^7.1.1",
    "moment": "^2.29.4",
    "moment-timezone": "^0.5.43",
    "mongoose": "^7.5.0",
    "multer": "^1.4.5-lts.1",
    "nodemailer": "^6.9.3",
    "passport": "^0.6.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "pg": "^8.11.0",
    "prom-client": "^14.2.0",
    "redis": "^4.6.7",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.8.1",
    "sharp": "^0.32.1",
    "socket.io": "^4.7.2",
    "swagger-ui-express": "^5.0.0",
    "typeorm": "^0.3.17",
    "uuid": "^9.0.0",
    "winston": "^3.17.0",
    "winston-daily-rotate-file": "^4.7.1",
    "zod": "^3.21.4"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.2",
    "@types/compression": "^1.7.2",
    "@types/cors": "^2.8.13",
    "@types/express": "^4.17.23",
    "@types/jest": "^29.5.14",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/lodash": "^4.14.195",
    "@types/multer": "^1.4.7",
    "@types/node": "^24.0.13",
    "@types/nodemailer": "^6.4.8",
    "@types/supertest": "^2.0.12",
    "@types/uuid": "^9.0.2",
    "@typescript-eslint/eslint-plugin": "^6.1.0",
    "@typescript-eslint/parser": "^6.1.0",
    "concurrently": "^8.2.0",
    "eslint": "^8.45.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-prettier": "^5.0.0",
    "http-server": "^14.1.1",
    "husky": "^8.0.3",
    "jest": "^30.0.4",
    "lint-staged": "^13.2.3",
    "nodemon": "^3.0.1",
    "prettier": "^3.0.0",
    "resolve.exports": "^2.0.3",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.1",
    "ts-loader": "^9.4.4",
    "ts-node": "^10.9.1",
    "typedoc": "^0.24.8",
    "typescript": "^5.8.3"
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "pre-push": "npm run test:integration"
    }
  },
  "lint-staged": {
    "*.{ts,js}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md}": [
      "prettier --write"
    ]
  },
  "config": {
    "mongodbMemoryServer": {
      "version": "5.0.0"
    }
  }
}
