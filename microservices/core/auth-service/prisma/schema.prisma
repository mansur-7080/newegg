// This is the complete Prisma schema for Auth Service
// Generator and datasource configuration
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("AUTH_DATABASE_URL")
}

// Enums
enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum SessionStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  EMAIL_VERIFICATION
  TWO_FACTOR
}

// Models
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String?   @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  phoneNumber       String?   @unique
  role              UserRole  @default(CUSTOMER)
  status            UserStatus @default(PENDING_VERIFICATION)
  emailVerified     Boolean   @default(false)
  phoneVerified     Boolean   @default(false)
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  lastLoginAt       DateTime?
  lastActiveAt      DateTime?
  passwordChangedAt DateTime?
  failedLoginAttempts Int     @default(0)
  lockedUntil       DateTime?
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  sessions          UserSession[]
  tokens            UserToken[]
  loginHistory      LoginHistory[]
  passwordHistory   PasswordHistory[]
  twoFactorBackups  TwoFactorBackup[]

  @@map("users")
}

model UserSession {
  id          String        @id @default(cuid())
  userId      String
  sessionId   String        @unique
  deviceId    String?
  deviceInfo  Json?
  ipAddress   String?
  userAgent   String?
  location    Json?
  status      SessionStatus @default(ACTIVE)
  expiresAt   DateTime
  lastUsedAt  DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  type      TokenType
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_tokens")
}

model LoginHistory {
  id         String   @id @default(cuid())
  userId     String
  ipAddress  String?
  userAgent  String?
  deviceInfo Json?
  location   Json?
  success    Boolean
  failReason String?
  loginAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_history")
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_history")
}

model TwoFactorBackup {
  id        String   @id @default(cuid())
  userId    String
  code      String
  used      Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_backups")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  resource    String
  action      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("audit_logs")
} 