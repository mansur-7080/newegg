generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Vendor model for marketplace sellers
model Vendor {
  id                String            @id @default(cuid())
  businessName      String
  businessNameRu    String?
  businessType      BusinessType
  ownerName         String
  email             String            @unique
  phone             String            @unique
  region            String
  address           Json              // UzbekAddress structure
  taxId             String            @unique
  bankAccount       String
  bankName          String
  businessLicense   String?
  categories        String[]
  description       String
  descriptionRu     String?
  preferredLanguage String            @default("uz")
  
  // Status and verification
  status            VendorStatus      @default(PENDING)
  verificationLevel VerificationLevel @default(BASIC)
  isVerified        Boolean           @default(false)
  verifiedAt        DateTime?
  
  // Performance metrics
  rating            Float             @default(0.0)
  reviewCount       Int               @default(0)
  totalSales        Int               @default(0)
  totalOrders       Int               @default(0)
  commission        Float             @default(5.0)
  tier              VendorTier        @default(BRONZE)
  
  // Badges and features
  badges            String[]          @default([])
  featuredUntil     DateTime?
  isPremium         Boolean           @default(false)
  isPromoted        Boolean           @default(false)
  
  // Payment settings
  paymentMethods    String[]          @default(["click", "payme", "cash_on_delivery"])
  payoutMethod      String            @default("bank_transfer")
  
  // Activity tracking
  joinDate          DateTime          @default(now())
  lastActive        DateTime          @default(now())
  
  // Relationships
  products          Product[]
  orders            VendorOrder[]
  reviews           VendorReview[]
  payouts           VendorPayout[]
  documents         VendorDocument[]
  analytics         VendorAnalytics[]
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@map("vendors")
}

// Products managed by vendors
model Product {
  id               String           @id @default(cuid())
  vendorId         String
  vendor           Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  // Basic information
  name             String
  nameRu           String?
  description      String
  descriptionRu    String?
  shortDescription String?
  
  // Pricing
  price            Int              // Price in UZS (stored as integer, tiyin)
  currency         String           @default("UZS")
  discountPrice    Int?
  discountPercent  Float?
  discountStartDate DateTime?
  discountEndDate  DateTime?
  
  // Inventory
  stock            Int              @default(0)
  lowStockThreshold Int             @default(5)
  isUnlimited      Boolean          @default(false)
  
  // Categorization
  category         String
  subcategory      String?
  brand            String?
  model            String?
  
  // Media
  images           String[]         @default([])
  videos           String[]         @default([])
  mainImage        String?
  
  // Product specifications
  specifications   Json?            // Flexible product specifications
  features         String[]         @default([])
  colors           String[]         @default([])
  sizes            String[]         @default([])
  
  // Physical properties
  weight           Float?           // Weight in kg
  dimensions       Json?            // Length, width, height in cm
  
  // SEO and marketing
  slug             String           @unique
  seoTitle         String?
  seoDescription   String?
  seoKeywords      String[]         @default([])
  tags             String[]         @default([])
  
  // Status and visibility
  status           ProductStatus    @default(DRAFT)
  isPromoted       Boolean          @default(false)
  promotionExpiry  DateTime?
  isFeatured       Boolean          @default(false)
  featuredUntil    DateTime?
  
  // Analytics
  viewCount        Int              @default(0)
  favoriteCount    Int              @default(0)
  totalSold        Int              @default(0)
  totalRevenue     Int              @default(0)
  
  // Shipping
  shippingWeight   Float?
  shippingDimensions Json?
  freeShipping     Boolean          @default(false)
  shippingCost     Int?
  
  // Relationships
  orderItems       VendorOrderItem[]
  reviews          ProductReview[]
  favorites        ProductFavorite[]
  variants         ProductVariant[]
  
  // Timestamps
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  publishedAt      DateTime?
  
  @@map("products")
  @@index([vendorId])
  @@index([category])
  @@index([status])
  @@index([price])
  @@index([createdAt])
}

// Product variants (size, color, etc.)
model ProductVariant {
  id          String  @id @default(cuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  name        String  // e.g., "Large Red", "Size M"
  sku         String  @unique
  price       Int?    // Override price if different
  stock       Int     @default(0)
  attributes  Json    // Color, size, material, etc.
  images      String[] @default([])
  
  isActive    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("product_variants")
}

// Vendor orders (subset of main orders for vendor management)
model VendorOrder {
  id               String            @id @default(cuid())
  vendorId         String
  vendor           Vendor            @relation(fields: [vendorId], references: [id])
  
  // Order information
  orderNumber      String            @unique
  customerId       String
  customerName     String
  customerPhone    String
  customerEmail    String?
  
  // Items and pricing
  items            VendorOrderItem[]
  subtotal         Int               // Subtotal in UZS tiyin
  commission       Int               // Platform commission
  vendorEarnings   Int               // Vendor's earnings
  shippingCost     Int               @default(0)
  totalAmount      Int               // Total order amount
  
  // Status tracking
  status           OrderStatus       @default(PENDING)
  paymentStatus    PaymentStatus     @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(PENDING)
  
  // Shipping information
  shippingMethod   String?
  trackingNumber   String?
  shippingAddress  Json              // UzbekAddress structure
  estimatedDelivery DateTime?
  actualDelivery   DateTime?
  
  // Payment information
  paymentMethod    String
  paymentId        String?
  paidAt           DateTime?
  
  // Additional information
  notes            String?
  customerNotes    String?
  internalNotes    String?
  
  // Important dates
  orderDate        DateTime          @default(now())
  confirmedAt      DateTime?
  shippedAt        DateTime?
  deliveredAt      DateTime?
  cancelledAt      DateTime?
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  @@map("vendor_orders")
  @@index([vendorId])
  @@index([status])
  @@index([orderDate])
}

// Individual items in vendor orders
model VendorOrderItem {
  id          String      @id @default(cuid())
  orderId     String
  order       VendorOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId   String
  product     Product     @relation(fields: [productId], references: [id])
  
  productName String      // Snapshot of product name at time of order
  productImage String?    // Main product image URL
  price       Int         // Price at time of order (UZS tiyin)
  quantity    Int
  total       Int         // price * quantity
  
  // Product details at time of order
  specifications Json?
  variant     String?     // Selected variant
  
  createdAt   DateTime    @default(now())
  
  @@map("vendor_order_items")
}

// Vendor reviews and ratings
model VendorReview {
  id        String   @id @default(cuid())
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  customerId String
  customerName String
  orderId   String?  // Optional reference to order
  
  rating    Int      // 1-5 stars
  title     String?
  comment   String
  
  // Review aspects
  communication Int?  // 1-5 rating for communication
  shipping     Int?   // 1-5 rating for shipping speed
  quality      Int?   // 1-5 rating for product quality
  
  isVerified Boolean @default(false)
  isPublic   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("vendor_reviews")
  @@index([vendorId])
  @@index([rating])
}

// Product reviews
model ProductReview {
  id         String  @id @default(cuid())
  productId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  customerId String
  customerName String
  orderId    String? // Optional reference to order
  
  rating     Int     // 1-5 stars
  title      String?
  comment    String
  images     String[] @default([])
  
  // Review helpfulness
  helpfulCount Int   @default(0)
  
  isVerified Boolean @default(false)
  isPublic   Boolean @default(true)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("product_reviews")
  @@index([productId])
  @@index([rating])
}

// Customer favorites/wishlist
model ProductFavorite {
  id         String  @id @default(cuid())
  productId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  customerId String
  
  createdAt  DateTime @default(now())
  
  @@unique([productId, customerId])
  @@map("product_favorites")
}

// Vendor payouts
model VendorPayout {
  id           String      @id @default(cuid())
  vendorId     String
  vendor       Vendor      @relation(fields: [vendorId], references: [id])
  
  amount       Int         // Amount in UZS tiyin
  currency     String      @default("UZS")
  method       PayoutMethod
  status       PayoutStatus @default(PENDING)
  
  // Bank details for payout
  bankAccount  String?
  bankName     String?
  accountHolder String?
  
  // Reference information
  referenceNumber String?
  transactionId String?
  
  // Period covered
  periodStart  DateTime
  periodEnd    DateTime
  
  // Processing information
  requestedAt  DateTime    @default(now())
  processedAt  DateTime?
  completedAt  DateTime?
  
  notes        String?
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@map("vendor_payouts")
  @@index([vendorId])
  @@index([status])
}

// Vendor documents and verification
model VendorDocument {
  id          String         @id @default(cuid())
  vendorId    String
  vendor      Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  type        DocumentType
  title       String
  filename    String
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  
  status      DocumentStatus @default(PENDING)
  verifiedAt  DateTime?
  verifiedBy  String?
  
  expiryDate  DateTime?
  isRequired  Boolean        @default(false)
  
  notes       String?
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  @@map("vendor_documents")
  @@index([vendorId])
  @@index([type])
}

// Vendor analytics data
model VendorAnalytics {
  id              String   @id @default(cuid())
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  date            DateTime
  
  // Sales metrics
  orders          Int      @default(0)
  revenue         Int      @default(0)
  commission      Int      @default(0)
  netEarnings     Int      @default(0)
  
  // Product metrics
  productsViewed  Int      @default(0)
  productsClicked Int      @default(0)
  productsAdded   Int      @default(0)
  
  // Conversion metrics
  conversionRate  Float    @default(0.0)
  averageOrderValue Int    @default(0)
  
  // Customer metrics
  newCustomers    Int      @default(0)
  returningCustomers Int   @default(0)
  
  createdAt       DateTime @default(now())
  
  @@unique([vendorId, date])
  @@map("vendor_analytics")
  @@index([date])
}

// Enums
enum BusinessType {
  INDIVIDUAL
  LLC
  JSC
  COOPERATIVE
  
  @@map("business_type")
}

enum VendorStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
  INACTIVE
  
  @@map("vendor_status")
}

enum VerificationLevel {
  BASIC
  VERIFIED
  PREMIUM
  
  @@map("verification_level")
}

enum VendorTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  
  @@map("vendor_tier")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
  
  @@map("product_status")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
  
  @@map("order_status")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  
  @@map("payment_status")
}

enum FulfillmentStatus {
  PENDING
  PROCESSING
  PACKED
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED_DELIVERY
  RETURNED
  
  @@map("fulfillment_status")
}

enum PayoutMethod {
  BANK_TRANSFER
  CLICK
  PAYME
  CASH
  
  @@map("payout_method")
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  
  @@map("payout_status")
}

enum DocumentType {
  BUSINESS_LICENSE
  TAX_CERTIFICATE
  BANK_STATEMENT
  ID_DOCUMENT
  UTILITY_BILL
  CONTRACT
  OTHER
  
  @@map("document_type")
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  
  @@map("document_status")
} 