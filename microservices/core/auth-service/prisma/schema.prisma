// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  role            UserRole  @default(CUSTOMER)
  isEmailVerified Boolean   @default(false)
  isPhoneVerified Boolean   @default(false)
  status          UserStatus @default(ACTIVE)
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  refreshTokens   RefreshToken[]
  passwordResets  PasswordReset[]
  auditLogs       AuditLog[]
  securityLogs    SecurityLog[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model AuditLog {
  id        String   @id @default(cuid())
  event     String
  userId    String?
  email     String?
  ipAddress String?
  userAgent String?
  action    String?
  resource  String?
  details   Json?
  metadata  Json?
  timestamp DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model SecurityLog {
  id          String        @id @default(cuid())
  eventType   String
  severity    SecurityLevel
  description String
  userId      String?
  email       String?
  ipAddress   String?
  userAgent   String?
  details     Json?
  metadata    Json?
  timestamp   DateTime      @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum SecurityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
} 