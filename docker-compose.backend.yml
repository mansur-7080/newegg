version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: microservices/core/api-gateway/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      - AUTH_SERVICE_URL=http://auth-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - PAYMENT_SERVICE_URL=http://payment-service:3005
      - SEARCH_SERVICE_URL=http://product-service:3003
      - NOTIFICATION_SERVICE_URL=http://notification-service:3007
      - ANALYTICS_SERVICE_URL=http://analytics-service:3008
      - CORS_ORIGIN=*
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
    depends_on:
      - auth-service
      - product-service
      - order-service
      - payment-service
      - notification-service
      - analytics-service
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: microservices/core/auth-service/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://ultramarket:ultramarket123@postgres:5432/ultramarket_auth
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
      - CORS_ORIGIN=*
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      - postgres
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: microservices/business/product-service/product-service/Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - HOST=0.0.0.0
      - MONGODB_URI=mongodb://ultramarket:ultramarket123@mongo:27017/ultramarket_products
      - CORS_ORIGIN=*
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      - mongo
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: microservices/business/order-service/order-service/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://ultramarket:ultramarket123@postgres:5432/ultramarket_orders
      - CORS_ORIGIN=*
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      - postgres
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: microservices/business/payment-service/payment-service/Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://ultramarket:ultramarket123@postgres:5432/ultramarket_payments
      - STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
      - STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
      - CORS_ORIGIN=*
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      - postgres
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: microservices/platform/notification-service/notification-service/Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - PORT=3007
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://ultramarket:ultramarket123@postgres:5432/ultramarket_notifications
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your-email@gmail.com
      - SMTP_PASS=your-app-password
      - CORS_ORIGIN=*
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      - postgres
      - redis
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: microservices/analytics/analytics-service/Dockerfile
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=development
      - PORT=3008
      - HOST=0.0.0.0
      - CLICKHOUSE_URL=http://clickhouse:8123
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=*
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      - clickhouse
      - redis
    networks:
      - ultramarket-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=ultramarket
      - POSTGRES_PASSWORD=ultramarket123
      - POSTGRES_DB=ultramarket_main
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    networks:
      - ultramarket-network
    restart: unless-stopped

  # MongoDB Database
  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ultramarket
      - MONGO_INITDB_ROOT_PASSWORD=ultramarket123
      - MONGO_INITDB_DATABASE=ultramarket_products
    volumes:
      - mongo_data:/data/db
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass ultramarket123
    volumes:
      - redis_data:/data
    networks:
      - ultramarket-network
    restart: unless-stopped

  # ClickHouse Analytics Database
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      - CLICKHOUSE_DB=ultramarket_analytics
      - CLICKHOUSE_USER=ultramarket
      - CLICKHOUSE_PASSWORD=ultramarket123
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Elasticsearch Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Kibana (for Elasticsearch management)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=ultramarket123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ultramarket-network
    restart: unless-stopped

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=ultramarket
      - RABBITMQ_DEFAULT_PASS=ultramarket123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ultramarket-network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=ultramarket
      - MINIO_ROOT_PASSWORD=ultramarket123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - ultramarket-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - ultramarket-network
    restart: unless-stopped

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  clickhouse_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  rabbitmq_data:
  minio_data:

networks:
  ultramarket-network:
    driver: bridge