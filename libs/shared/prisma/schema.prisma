// UltraMarket Platform - Shared Database Schema
// This schema integrates all microservices into a unified database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USER MANAGEMENT =====
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  phone           String?   @unique
  password        String
  firstName       String
  lastName        String
  avatar          String?
  role            UserRole  @default(CUSTOMER)
  status          UserStatus @default(ACTIVE)
  emailVerified   Boolean   @default(false)
  phoneVerified   Boolean   @default(false)
  
  // Profile data
  dateOfBirth     DateTime?
  gender          Gender?
  address         String?
  city            String?
  region          String?
  postalCode      String?
  
  // Preferences
  language        String    @default("uz")
  currency        String    @default("UZS")
  timezone        String    @default("Asia/Tashkent")
  
  // Relations
  stores          Store[]
  orders          Order[]
  cart            Cart?
  reviews         Review[]
  wishlist        WishlistItem[]
  notifications   Notification[]
  sessions        UserSession[]
  activities      UserActivity[]
  priceAlerts     ProductPriceAlert[]
  pcBuilds        PCBuild[]
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginAt     DateTime?
  deletedAt       DateTime?

  @@map("users")
}

model UserSession {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String    @unique
  device      String?
  ipAddress   String?
  userAgent   String?
  isActive    Boolean   @default(true)
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  
  // Analytics
  pageViews   Int       @default(0)
  duration    Int?      // seconds

  @@map("user_sessions")
}

model UserActivity {
  id          String    @id @default(cuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  sessionId   String?
  type        String    // PAGE_VIEW, SEARCH, PURCHASE, etc.
  page        String
  action      String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([type])
  @@index([page])
  @@index([createdAt])
  @@map("user_activities")
}

// ===== STORE MANAGEMENT =====
model Store {
  id              String      @id @default(cuid())
  name            String
  slug            String      @unique
  description     String?
  logo            String?
  banner          String?
  
  // Owner
  ownerId         String
  owner           User        @relation(fields: [ownerId], references: [id])
  
  // Business info
  businessLicense String?
  taxNumber       String?
  phone           String?
  email           String?
  website         String?
  
  // Address
  address         String?
  city            String?
  region          String?
  postalCode      String?
  coordinates     String?
  
  // Status
  status          StoreStatus @default(PENDING)
  isVerified      Boolean     @default(false)
  
  // Settings
  settings        Json?
  
  // Relations
  products        Product[]
  orders          Order[]
  staff           StoreStaff[]
  categories      StoreCategory[]
  
  // Analytics
  views           Int         @default(0)
  rating          Decimal?    @db.Decimal(3, 2)
  reviewCount     Int         @default(0)
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  verifiedAt      DateTime?
  deletedAt       DateTime?

  @@map("stores")
}

model StoreStaff {
  id        String    @id @default(cuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  userId    String
  role      StaffRole @default(EMPLOYEE)
  permissions Json?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([storeId, userId])
  @@map("store_staff")
}

// ===== PRODUCT CATALOG =====
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  icon        String?
  
  // Hierarchy
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // Relations
  products    Product[]
  filters     CategoryFilter[]
  storeCategories StoreCategory[]
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Status
  isActive    Boolean   @default(true)
  order       Int       @default(0)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model StoreCategory {
  id         String   @id @default(cuid())
  storeId    String
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  @@unique([storeId, categoryId])
  @@map("store_categories")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  logo        String?
  website     String?
  country     String?
  isActive    Boolean   @default(true)
  
  // Relations
  products    Product[]
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("brands")
}

model Product {
  id              String            @id @default(cuid())
  name            String
  slug            String            @unique
  description     String?
  shortDescription String?
  sku             String            @unique
  barcode         String?
  
  // Pricing
  price           Decimal           @db.Decimal(10, 2)
  salePrice       Decimal?          @db.Decimal(10, 2)
  costPrice       Decimal?          @db.Decimal(10, 2)
  currency        String            @default("UZS")
  
  // Inventory
  stock           Int               @default(0)
  minStock        Int               @default(0)
  maxStock        Int?
  
  // Status
  status          ProductStatus     @default(ACTIVE)
  featured        Boolean           @default(false)
  
  // Relations
  storeId         String
  store           Store             @relation(fields: [storeId], references: [id])
  categoryId      String
  category        Category          @relation(fields: [categoryId], references: [id])
  brandId         String?
  brand           Brand?            @relation(fields: [brandId], references: [id])
  
  // Media
  images          ProductImage[]
  videos          ProductVideo[]
  
  // Details
  specifications  ProductSpecification[]
  variants        ProductVariant[]
  
  // Reviews and ratings
  reviews         Review[]
  rating          Decimal?          @db.Decimal(3, 2)
  reviewCount     Int               @default(0)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Analytics
  views           Int               @default(0)
  sales           Int               @default(0)
  
  // Compatibility (for tech products)
  compatibleWith  ProductCompatibility[] @relation("ProductCompatible")
  compatibleProducts ProductCompatibility[] @relation("CompatibleProduct")
  
  // Shopping
  cartItems       CartItem[]
  orderItems      OrderItem[]
  wishlistItems   WishlistItem[]
  
  // PC Builder
  pcBuildProducts PCBuildProduct[]
  
  // Price tracking
  priceHistory    ProductPriceHistory[]
  priceAlerts     ProductPriceAlert[]
  
  // Timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?

  @@index([storeId])
  @@index([categoryId])
  @@index([status])
  @@index([featured])
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  altText   String?
  isPrimary Boolean @default(false)
  order     Int     @default(0)
  createdAt DateTime @default(now())

  @@map("product_images")
}

model ProductVideo {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  title     String?
  duration  Int?
  thumbnail String?
  order     Int     @default(0)
  createdAt DateTime @default(now())

  @@map("product_videos")
}

model ProductSpecification {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  value     String
  unit      String?
  group     String?
  order     Int     @default(0)
  createdAt DateTime @default(now())

  @@map("product_specifications")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  sku       String  @unique
  price     Decimal @db.Decimal(10, 2)
  stock     Int     @default(0)
  attributes Json?  // color, size, etc.
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_variants")
}

model ProductCompatibility {
  id               String  @id @default(cuid())
  productId        String
  product          Product @relation("ProductCompatible", fields: [productId], references: [id], onDelete: Cascade)
  compatibleId     String
  compatibleProduct Product @relation("CompatibleProduct", fields: [compatibleId], references: [id], onDelete: Cascade)
  compatibilityType String
  notes            String?
  createdAt        DateTime @default(now())

  @@unique([productId, compatibleId])
  @@map("product_compatibility")
}

model ProductPriceHistory {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  price     Decimal  @db.Decimal(10, 2)
  salePrice Decimal? @db.Decimal(10, 2)
  source    String   @default("system")
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([createdAt])
  @@map("product_price_history")
}

model ProductPriceAlert {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetPrice Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  triggered   Boolean  @default(false)
  createdAt   DateTime @default(now())
  triggeredAt DateTime?

  @@unique([productId, userId])
  @@map("product_price_alerts")
}

// ===== SHOPPING CART =====
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@map("cart_items")
}

// ===== ORDERS =====
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  
  // Customer
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  // Store
  storeId         String
  store           Store       @relation(fields: [storeId], references: [id])
  
  // Pricing
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2) @default(0)
  shipping        Decimal     @db.Decimal(10, 2) @default(0)
  discount        Decimal     @db.Decimal(10, 2) @default(0)
  total           Decimal     @db.Decimal(10, 2)
  currency        String      @default("UZS")
  
  // Status
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  shippingStatus  ShippingStatus @default(PENDING)
  
  // Payment
  paymentMethod   String?
  paymentId       String?
  paidAt          DateTime?
  
  // Shipping
  shippingAddress Json
  billingAddress  Json?
  shippingMethod  String?
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Relations
  items           OrderItem[]
  payments        Payment[]
  shipments       Shipment[]
  
  // Notes
  notes           String?
  cancelReason    String?
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  cancelledAt     DateTime?

  @@index([userId])
  @@index([storeId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  @@map("order_items")
}

// ===== PAYMENTS =====
model Payment {
  id              String        @id @default(cuid())
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("UZS")
  method          PaymentMethod
  provider        String        // click, payme, apelsin, etc.
  providerId      String?       // external payment ID
  status          PaymentStatus @default(PENDING)
  
  // Provider specific data
  providerData    Json?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  processedAt     DateTime?
  failedAt        DateTime?

  @@index([orderId])
  @@index([status])
  @@map("payments")
}

// ===== SHIPPING =====
model Shipment {
  id             String         @id @default(cuid())
  orderId        String
  order          Order          @relation(fields: [orderId], references: [id])
  trackingNumber String         @unique
  carrier        String         // uzpost, courier, etc.
  method         String
  status         ShippingStatus @default(PENDING)
  
  // Address
  fromAddress    Json
  toAddress      Json
  
  // Tracking
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  
  // Events
  events         ShipmentEvent[]
  
  // Timestamps
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("shipments")
}

model ShipmentEvent {
  id          String    @id @default(cuid())
  shipmentId  String
  shipment    Shipment  @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  status      String
  description String
  location    String?
  timestamp   DateTime  @default(now())

  @@map("shipment_events")
}

// ===== REVIEWS =====
model Review {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  title     String?
  comment   String?
  pros      String[]
  cons      String[]
  verified  Boolean @default(false)
  helpful   Int     @default(0)
  status    ReviewStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
  @@map("reviews")
}

// ===== WISHLIST =====
model WishlistItem {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// ===== PC BUILDER =====
model PCBuild {
  id          String           @id @default(cuid())
  name        String
  description String?
  userId      String?
  user        User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  userName    String?
  isPublic    Boolean          @default(false)
  budget      Decimal?         @db.Decimal(10, 2)
  purpose     String[]
  
  // Performance scores
  gameScore        Int?
  productivityScore Int?
  powerConsumption Int?
  
  // Build components
  products    PCBuildProduct[]
  
  // Stats
  views       Int              @default(0)
  likes       Int              @default(0)
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("pc_builds")
}

model PCBuildProduct {
  id        String  @id @default(cuid())
  buildId   String
  build     PCBuild @relation(fields: [buildId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  category  String
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  @@unique([buildId, productId])
  @@map("pc_build_products")
}

// ===== FILTERS =====
model CategoryFilter {
  id         String   @id @default(cuid())
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name       String
  type       FilterType
  options    String[]
  required   Boolean  @default(false)
  order      Int      @default(0)
  createdAt  DateTime @default(now())

  @@map("category_filters")
}

// ===== NOTIFICATIONS =====
model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  readAt    DateTime?

  @@index([userId])
  @@index([read])
  @@map("notifications")
}

// ===== ANALYTICS =====
model AnalyticsEvent {
  id              String        @id @default(cuid())
  userId          String?
  sessionId       String?
  eventType       String
  eventName       String
  properties      Json?
  timestamp       DateTime      @default(now())
  ipAddress       String?
  userAgent       String?
  referrer        String?
  pageUrl         String?
  metadata        Json?

  @@index([userId])
  @@index([sessionId])
  @@index([eventType])
  @@index([eventName])
  @@index([timestamp])
  @@map("analytics_events")
}

// ===== ENUMS =====
enum UserRole {
  SUPER_ADMIN
  ADMIN
  STORE_OWNER
  STORE_MANAGER
  STORE_EMPLOYEE
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum StoreStatus {
  PENDING
  ACTIVE
  SUSPENDED
  CLOSED
}

enum StaffRole {
  MANAGER
  EMPLOYEE
  VIEWER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CLICK
  PAYME
  APELSIN
  BANK_TRANSFER
  CASH_ON_DELIVERY
  CARD
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FilterType {
  SELECT
  RANGE
  CHECKBOX
  RADIO
}

enum NotificationType {
  ORDER_UPDATE
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  SHIPPING_UPDATE
  PRODUCT_ALERT
  PROMOTION
  SYSTEM
}