name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *' # Daily security scan at 2 AM

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ultramarket

jobs:
  # Security and Code Quality
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run SAST with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          publishToken: ${{ secrets.SEMGREP_TOKEN }}

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-scan

    strategy:
      matrix:
        node-version: [16, 18, 20]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: ultramarket_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:testpass@localhost:5432/ultramarket_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test

      - name: Run database migrations
        run: npm run db:migrate:test

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build and Push Docker Images
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    strategy:
      matrix:
        service:
          - user-service
          - product-service
          - cart-service
          - order-service
          - payment-service
          - api-gateway

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=commit-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./microservices/
          file: ./microservices/*/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30 # Wait for services to start

      - name: Run performance tests
        run: |
          k6 run tests/performance/load-test.js
          k6 run tests/performance/stress-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

  # Security Testing
  penetration-test:
    name: Penetration Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30 # Wait for services to start

      - name: Run penetration tests
        run: |
          node security-audit/penetration-testing.js
        env:
          API_BASE_URL: http://localhost:3000

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-audit/penetration-test-report.json

      - name: Check security score
        run: |
          SECURITY_SCORE=$(node -e "console.log(require('./security-audit/penetration-test-report.json').securityScore)")
          echo "Security Score: $SECURITY_SCORE"
          if [ "$SECURITY_SCORE" -lt 80 ]; then
            echo "Security score is below threshold (80). Failing build."
            exit 1
          fi

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [performance-test, penetration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config

      - name: Deploy to staging
        run: |
          helm upgrade --install ultramarket-staging ./infrastructure/helm/ultramarket \
            --namespace staging \
            --create-namespace \
            --set image.tag=commit-${{ github.sha }} \
            --set environment=staging \
            --set ingress.hosts[0].host=staging.ultramarket.com \
            --wait --timeout=10m

      - name: Run smoke tests
        run: |
          sleep 60 # Wait for deployment to stabilize
          curl -f https://staging.ultramarket.com/health || exit 1
          npm run test:smoke -- --baseUrl=https://staging.ultramarket.com

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

      - name: Create backup
        run: |
          kubectl create job backup-$(date +%Y%m%d%H%M%S) \
            --from=cronjob/database-backup \
            --namespace production

      - name: Deploy to production
        run: |
          helm upgrade --install ultramarket ./infrastructure/helm/ultramarket \
            --namespace production \
            --create-namespace \
            --set image.tag=commit-${{ github.sha }} \
            --set environment=production \
            --set ingress.hosts[0].host=ultramarket.com \
            --set resources.requests.memory=512Mi \
            --set resources.requests.cpu=250m \
            --set resources.limits.memory=1Gi \
            --set resources.limits.cpu=500m \
            --set autoscaling.enabled=true \
            --set autoscaling.minReplicas=3 \
            --set autoscaling.maxReplicas=10 \
            --wait --timeout=15m

      - name: Run production smoke tests
        run: |
          sleep 120 # Wait for deployment to stabilize
          curl -f https://ultramarket.com/health || exit 1
          npm run test:smoke -- --baseUrl=https://ultramarket.com

      - name: Update monitoring
        run: |
          # Update Prometheus targets
          kubectl patch configmap prometheus-config \
            --namespace monitoring \
            --patch '{"data":{"prometheus.yml":"$(cat infrastructure/monitoring/prometheus.yml | base64 -w 0)"}}'

          # Restart Prometheus to pick up new config
          kubectl rollout restart deployment/prometheus --namespace monitoring

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Cleanup old images
        run: |
          # This would typically clean up old container images
          echo "Cleaning up old images..."

      - name: Cleanup test environments
        run: |
          # This would typically clean up test environments
          echo "Cleaning up test environments..."

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: Notify Email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'UltraMarket Deployment Failed'
          body: |
            The deployment pipeline for UltraMarket has failed.

            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

            Please check the GitHub Actions logs for more details.
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: noreply@ultramarket.com
