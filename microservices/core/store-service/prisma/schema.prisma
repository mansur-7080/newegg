// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  status      StoreStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id])
  products    Product[]
  categories  Category[]
  orders      Order[]

  @@map("stores")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stores    Store[]
  orders    Order[]

  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  stock       Int      @default(0)
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  storeId     Int
  store       Store    @relation(fields: [storeId], references: [id])
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]

  @@map("products")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  storeId     Int
  store       Store    @relation(fields: [storeId], references: [id])
  products    Product[]

  @@map("categories")
}

model Order {
  id          Int      @id @default(autoincrement())
  total       Decimal
  status      OrderStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  storeId     Int
  store       Store    @relation(fields: [storeId], references: [id])
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())

  // Relations
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum StoreStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}