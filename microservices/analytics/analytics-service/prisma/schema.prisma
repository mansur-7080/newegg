// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String    @unique
  firstName   String?
  lastName    String?
  phone       String?
  avatar      String?
  status      String    @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  role        String    @default("USER") // USER, ADMIN, MODERATOR
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  orders      Order[]
  analytics   UserAnalytics[]

  @@map("users")
}

model Store {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  ownerId     String
  category    String?
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
  orders   Order[]

  @@map("stores")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal
  stock       Int      @default(0)
  storeId     String
  category    String?
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE, OUT_OF_STOCK
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  store      Store        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  storeId   String
  status    String   @default("PENDING") // PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED
  total     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  store     Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model UserAnalytics {
  id        String   @id @default(cuid())
  userId    String
  action    String   // VIEW, SEARCH, PURCHASE, LOGIN, etc.
  metadata  Json?    // Additional data about the action
  timestamp DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_analytics")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  type      String   // PAGE_VIEW, CLICK, CONVERSION, etc.
  userId    String?
  sessionId String?
  page      String?
  referrer  String?
  userAgent String?
  ip        String?
  metadata  Json?
  timestamp DateTime @default(now())

  @@map("analytics_events")
}

model SalesMetrics {
  id          String   @id @default(cuid())
  storeId     String?
  date        DateTime
  totalSales  Decimal
  totalOrders Int
  avgOrderValue Decimal
  conversionRate Decimal?
  createdAt   DateTime @default(now())

  @@map("sales_metrics")
}

model ProductMetrics {
  id          String   @id @default(cuid())
  productId   String
  date        DateTime
  views       Int      @default(0)
  sales       Int      @default(0)
  revenue     Decimal  @default(0)
  createdAt   DateTime @default(now())

  @@map("product_metrics")
}