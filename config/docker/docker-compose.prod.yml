# UltraMarket O'zbekiston Production Docker Compose Configuration
# O'zbekiston uchun moslashtirilgan va optimallashtirilgan konfiguratsiya

services:
  # =================== INFRASTRUCTURE SERVICES ===================

  # PostgreSQL - Asosiy ma'lumotlar bazasi
  postgres:
    image: postgres:15-alpine
    container_name: ultramarket-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ultramarket_uzb}
      POSTGRES_USER: ${POSTGRES_USER:-ultramarket_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256'
      POSTGRES_HOST_AUTH_METHOD: 'scram-sha-256'
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./scripts/postgres/init-primary.sql:/docker-entrypoint-initdb.d/01-init-primary.sql:ro
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    ports:
      - '5432:5432'
    networks:
      - ultramarket-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # PostgreSQL Read Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: ultramarket-postgres-replica
    restart: unless-stopped
    environment:
      PGUSER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
      PGPASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
      POSTGRES_MASTER_SERVICE: postgres-primary
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./scripts/postgres/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh:ro
    command: >
      bash -c "
      until pg_basebackup -h postgres-primary -D /var/lib/postgresql/data -U ${POSTGRES_REPLICATION_USER} -v -P -W;
      do echo 'Waiting for primary to be ready...'; sleep 1s; done;
      echo 'standby_mode = on' >> /var/lib/postgresql/data/recovery.conf;
      echo 'primary_conninfo = host=postgres-primary port=5432 user=${POSTGRES_REPLICATION_USER}' >> /var/lib/postgresql/data/recovery.conf;
      postgres"
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - ultramarket-network
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M

  # MongoDB Cluster
  mongodb-primary:
    image: mongo:7
    container_name: ultramarket-mongodb-primary
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_REPLICA_SET_NAME: rs0
    volumes:
      - mongodb_primary_data:/data/db
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./scripts/mongodb/init-replica-set.js:/docker-entrypoint-initdb.d/init-replica-set.js:ro
    command: ['mongod', '--config', '/etc/mongod.conf', '--replSet', 'rs0', '--bind_ip_all']
    ports:
      - '27017:27017'
    networks:
      - ultramarket-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Redis Cluster
  redis-master:
    image: redis:7-alpine
    container_name: ultramarket-redis-master
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --masterauth ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
    volumes:
      - redis_master_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - '6379:6379'
    networks:
      - ultramarket-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ultramarket-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=ultramarket-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - '9200:9200'
    networks:
      - ultramarket-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =================== MESSAGE QUEUE ===================

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ultramarket-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - ultramarket-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ultramarket-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_CLEANUP_POLICY: delete
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - '9092:9092'
    networks:
      - ultramarket-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ['CMD-SHELL', 'kafka-broker-api-versions --bootstrap-server localhost:9092']
      interval: 30s
      timeout: 10s
      retries: 3

  # =================== MONITORING STACK ===================

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ultramarket-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - '9090:9090'
    networks:
      - ultramarket-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Grafana
  grafana:
    image: grafana/grafana:10.0.0
    container_name: ultramarket-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - '3001:3000'
    networks:
      - ultramarket-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

  # =================== CORE SERVICES ===================

  # API Gateway
  api-gateway:
    build:
      context: ./microservices/core/api-gateway/api-gateway
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: ultramarket-api-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: ${API_GATEWAY_DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      CORS_ORIGINS: ${CORS_ORIGINS}
    ports:
      - '3000:3000'
    networks:
      - ultramarket-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # User Service
  user-service:
    build:
      context: ./microservices/core/user-service/user-service
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: ultramarket-user-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: ${USER_SERVICE_DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      EMAIL_SERVICE_URL: ${EMAIL_SERVICE_URL}
      KAFKA_BROKERS: kafka:29092
    networks:
      - ultramarket-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Product Service
  product-service:
    build:
      context: ./microservices/business/product-service/product-service
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: ultramarket-product-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3003
      MONGODB_URI: mongodb://${MONGODB_ROOT_USER}:${MONGODB_ROOT_PASSWORD}@mongodb-primary:27017/ultramarket_products?authSource=admin
      ELASTICSEARCH_URL: http://elastic:${ELASTICSEARCH_PASSWORD}@elasticsearch:9200
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      KAFKA_BROKERS: kafka:29092
      CDN_URL: ${CDN_URL}
    networks:
      - ultramarket-network
    depends_on:
      mongodb-primary:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3003/health']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # =================== LOAD BALANCER ===================

  # NGINX Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: ultramarket-nginx
    restart: unless-stopped
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - '80:80'
      - '443:443'
    networks:
      - ultramarket-network
    depends_on:
      - api-gateway
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

# =================== NETWORKS ===================
networks:
  ultramarket-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =================== VOLUMES ===================
volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  mongodb_primary_data:
    driver: local
  redis_master_data:
    driver: local
  elasticsearch_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
# =================== SECRETS (External) ===================
# Production secrets should be managed externally:
# - Docker Secrets
# - Kubernetes Secrets
# - HashiCorp Vault
# - AWS Secrets Manager
# - Azure Key Vault
