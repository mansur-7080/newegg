# =============================================
# Cart Service - Multi-stage Production Dockerfile
# =============================================

# =============================================
# Base stage with common dependencies
# =============================================
FROM node:18-alpine AS base

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app directory with proper permissions
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodeuser -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# =============================================
# Dependencies stage
# =============================================
FROM base AS deps

# Install all dependencies (including devDependencies for build)
RUN npm ci --only=production --frozen-lockfile && npm cache clean --force

# =============================================
# Build stage
# =============================================
FROM base AS builder

# Install all dependencies including dev
RUN npm ci --frozen-lockfile

# Copy source code
COPY . .

# Generate Prisma client if schema exists
RUN [ -f "prisma/schema.prisma" ] && npx prisma generate || echo "No Prisma schema found"

# Build the application if build script exists
RUN npm run build 2>/dev/null || echo "No build script found"

# Prune dev dependencies
RUN npm prune --production

# =============================================
# Production stage
# =============================================
FROM node:18-alpine AS production

# Install dumb-init and security updates
RUN apk add --no-cache dumb-init \
    && apk upgrade --no-cache

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodeuser -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nodeuser:nodejs /app/dist ./dist/
COPY --from=builder --chown=nodeuser:nodejs /app/src ./src/
COPY --from=builder --chown=nodeuser:nodejs /app/node_modules ./node_modules/
COPY --from=builder --chown=nodeuser:nodejs /app/package*.json ./
COPY --from=builder --chown=nodeuser:nodejs /app/prisma ./prisma/

# Copy health check script if exists
COPY --chown=nodeuser:nodejs healthcheck.js ./

# Create logs directory
RUN mkdir -p /app/logs && chown -R nodeuser:nodejs /app/logs

# Switch to non-root user
USER nodeuser

# Expose port
EXPOSE 3003

# Health check with optimized intervals
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD node healthcheck.js || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application (try dist first, fallback to src)
CMD ["sh", "-c", "[ -f dist/index.js ] && node dist/index.js || node src/index.js"]

# =============================================
# Development stage
# =============================================
FROM base AS development

# Install all dependencies
RUN npm ci --frozen-lockfile

# Copy source code
COPY . .

# Generate Prisma client if schema exists
RUN [ -f "prisma/schema.prisma" ] && npx prisma generate || echo "No Prisma schema found"

# Create logs directory
RUN mkdir -p /app/logs && chown -R nodeuser:nodejs /app

# Switch to non-root user
USER nodeuser

# Expose port
EXPOSE 3003

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD node healthcheck.js || exit 1

# Start development server with hot reload
CMD ["npm", "run", "dev"] 