// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Payment {
  id                     String    @id @default(cuid())
  orderId                String    @map("order_id")
  userId                 String    @map("user_id")
  amount                 Float
  currency               String    @default("UZS")
  method                 PaymentMethod
  status                 PaymentStatus @default(PENDING)
  gatewayTransactionId   String?   @map("gateway_transaction_id")
  gatewayPaymentId       String?   @map("gateway_payment_id")
  failureReason          String?   @map("failure_reason")
  metadata               Json?
  
  // Timestamps
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  completedAt            DateTime? @map("completed_at")
  failedAt               DateTime? @map("failed_at")
  cancelledAt            DateTime? @map("cancelled_at")
  
  // Relations
  refunds                Refund[]
  webhooks               Webhook[]
  
  @@map("payments")
  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([method])
  @@index([createdAt])
  @@index([gatewayTransactionId])
}

model Refund {
  id                     String    @id @default(cuid())
  paymentId              String    @map("payment_id")
  amount                 Float
  reason                 String
  status                 RefundStatus @default(PENDING)
  refundedBy             String    @map("refunded_by")
  gatewayRefundId        String?   @map("gateway_refund_id")
  failureReason          String?   @map("failure_reason")
  metadata               Json?
  
  // Timestamps
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  completedAt            DateTime? @map("completed_at")
  failedAt               DateTime? @map("failed_at")
  
  // Relations
  payment                Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  @@map("refunds")
  @@index([paymentId])
  @@index([status])
  @@index([createdAt])
}

model Webhook {
  id                     String    @id @default(cuid())
  paymentId              String    @map("payment_id")
  provider               PaymentProvider
  event                  String
  data                   Json
  signature              String?
  verified               Boolean   @default(false)
  processed              Boolean   @default(false)
  processingError        String?   @map("processing_error")
  retryCount             Int       @default(0) @map("retry_count")
  
  // Timestamps
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  processedAt            DateTime? @map("processed_at")
  nextRetryAt            DateTime? @map("next_retry_at")
  
  // Relations
  payment                Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  @@map("webhooks")
  @@index([paymentId])
  @@index([provider])
  @@index([event])
  @@index([processed])
  @@index([createdAt])
}

model PaymentMethod {
  id                     String    @id @default(cuid())
  code                   String    @unique
  name                   String
  description            String?
  enabled                Boolean   @default(true)
  minAmount              Float?    @map("min_amount")
  maxAmount              Float?    @map("max_amount")
  feePercentage          Float?    @map("fee_percentage")
  feeFixed               Float?    @map("fee_fixed")
  configuration          Json?
  
  // Timestamps
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  
  @@map("payment_methods")
  @@index([code])
  @@index([enabled])
}

model PaymentTransaction {
  id                     String    @id @default(cuid())
  orderId                String    @map("order_id")
  paymeTransactionId     String?   @unique @map("payme_transaction_id")
  clickTransId           String?   @unique @map("click_trans_id")
  amount                 Float
  currency               String    @default("UZS")
  status                 TransactionStatus @default(PENDING)
  paymentMethod          String    @map("payment_method")
  cancelReason           String?   @map("cancel_reason")
  metadata               Json?
  
  // Timestamps
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  completedAt            DateTime? @map("completed_at")
  cancelledAt            DateTime? @map("cancelled_at")
  
  // Relations
  order                  Order     @relation(fields: [orderId], references: [id])
  
  @@map("payment_transactions")
  @@index([orderId])
  @@index([paymeTransactionId])
  @@index([clickTransId])
  @@index([status])
  @@index([createdAt])
}

model PaymentAudit {
  id                     String    @id @default(cuid())
  paymentId              String    @map("payment_id")
  action                 String
  oldStatus              String?   @map("old_status")
  newStatus              String?   @map("new_status")
  performedBy            String?   @map("performed_by")
  ipAddress              String?   @map("ip_address")
  userAgent              String?   @map("user_agent")
  changes                Json?
  
  // Timestamps
  createdAt              DateTime  @default(now()) @map("created_at")
  
  @@map("payment_audits")
  @@index([paymentId])
  @@index([action])
  @@index([createdAt])
}

model Order {
  id                     String    @id @default(cuid())
  orderNumber            String    @unique @map("order_number")
  userId                 String    @map("user_id")
  status                 OrderStatus @default(PENDING)
  paymentStatus          PaymentStatus @default(PENDING) @map("payment_status")
  totalAmount            Float     @map("total_amount")
  currency               String    @default("UZS")
  customerEmail          String    @map("customer_email")
  customerPhone          String?   @map("customer_phone")
  metadata               Json?
  
  // Timestamps
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  paidAt                 DateTime? @map("paid_at")
  
  // Relations
  transactions           PaymentTransaction[]
  statusHistory          OrderStatusHistory[]
  
  @@map("orders")
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
}

model OrderStatusHistory {
  id                     String    @id @default(cuid())
  orderId                String    @map("order_id")
  status                 String
  comment                String?
  createdAt              DateTime  @default(now()) @map("created_at")
  
  // Relations
  order                  Order     @relation(fields: [orderId], references: [id])
  
  @@map("order_status_history")
  @@index([orderId])
  @@index([createdAt])
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CLICK
  PAYME
  CASH
  CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentProvider {
  CLICK
  PAYME
  INTERNAL
}

enum TransactionType {
  PAYMENT
  REFUND
  CHARGEBACK
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}