version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: ultramarket-postgres
    environment:
      POSTGRES_DB: ultramarket
      POSTGRES_USER: ultramarket_user
      POSTGRES_PASSWORD: ultramarket_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/user-service/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ultramarket_user -d ultramarket"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: ultramarket-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB (for product service)
  mongodb:
    image: mongo:7
    container_name: ultramarket-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ultramarket_admin
      MONGO_INITDB_ROOT_PASSWORD: ultramarket_password
      MONGO_INITDB_DATABASE: ultramarket_products
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch (for search service)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ultramarket-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana (for Elasticsearch management)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ultramarket-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ultramarket-network

  # RabbitMQ (for message queuing)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ultramarket-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ultramarket_user
      RABBITMQ_DEFAULT_PASS: ultramarket_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mailhog (for email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ultramarket-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - ultramarket-network

  # Prometheus (for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: ultramarket-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ultramarket-network

  # Grafana (for monitoring dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: ultramarket-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ultramarket-network

  # Jaeger (for distributed tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ultramarket-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - ultramarket-network

  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile.dev
    container_name: ultramarket-user-service
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://ultramarket_user:ultramarket_password@postgres:5432/ultramarket
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-for-development
      JWT_REFRESH_SECRET: your-super-secret-jwt-refresh-key-for-development
      EMAIL_SERVICE_URL: http://notification-service:3006
      RABBITMQ_URL: amqp://ultramarket_user:ultramarket_password@rabbitmq:5672
    ports:
      - "3001:3001"
    volumes:
      - ./backend/user-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile.dev
    container_name: ultramarket-product-service
    environment:
      NODE_ENV: development
      PORT: 3002
      MONGODB_URI: mongodb://ultramarket_admin:ultramarket_password@mongodb:27017/ultramarket_products?authSource=admin
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      RABBITMQ_URL: amqp://ultramarket_user:ultramarket_password@rabbitmq:5672
    ports:
      - "3002:3002"
    volumes:
      - ./backend/product-service:/app
      - /app/node_modules
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cart Service
  cart-service:
    build:
      context: ./backend/cart-service
      dockerfile: Dockerfile.dev
    container_name: ultramarket-cart-service
    environment:
      NODE_ENV: development
      PORT: 3003
      REDIS_URL: redis://redis:6379
      USER_SERVICE_URL: http://user-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
      RABBITMQ_URL: amqp://ultramarket_user:ultramarket_password@rabbitmq:5672
    ports:
      - "3003:3003"
    volumes:
      - ./backend/cart-service:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ./backend/order-service
      dockerfile: Dockerfile.dev
    container_name: ultramarket-order-service
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://ultramarket_user:ultramarket_password@postgres:5432/ultramarket_orders
      REDIS_URL: redis://redis:6379
      USER_SERVICE_URL: http://user-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
      PAYMENT_SERVICE_URL: http://payment-service:3005
      NOTIFICATION_SERVICE_URL: http://notification-service:3006
      RABBITMQ_URL: amqp://ultramarket_user:ultramarket_password@rabbitmq:5672
    ports:
      - "3004:3004"
    volumes:
      - ./backend/order-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service
  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile.dev
    container_name: ultramarket-payment-service
    environment:
      NODE_ENV: development
      PORT: 3005
      DATABASE_URL: postgresql://ultramarket_user:ultramarket_password@postgres:5432/ultramarket_payments
      REDIS_URL: redis://redis:6379
      STRIPE_SECRET_KEY: sk_test_your_stripe_test_key
      STRIPE_WEBHOOK_SECRET: whsec_your_stripe_webhook_secret
      RABBITMQ_URL: amqp://ultramarket_user:ultramarket_password@rabbitmq:5672
    ports:
      - "3005:3005"
    volumes:
      - ./backend/payment-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile.dev
    container_name: ultramarket-notification-service
    environment:
      NODE_ENV: development
      PORT: 3006
      REDIS_URL: redis://redis:6379
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: 
      SMTP_PASS: 
      RABBITMQ_URL: amqp://ultramarket_user:ultramarket_password@rabbitmq:5672
    ports:
      - "3006:3006"
    volumes:
      - ./backend/notification-service:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Search Service
  search-service:
    build:
      context: ./backend/search-service
      dockerfile: Dockerfile.dev
    container_name: ultramarket-search-service
    environment:
      NODE_ENV: development
      PORT: 3007
      ELASTICSEARCH_URL: http://elasticsearch:9200
      PRODUCT_SERVICE_URL: http://product-service:3002
      RABBITMQ_URL: amqp://ultramarket_user:ultramarket_password@rabbitmq:5672
    ports:
      - "3007:3007"
    volumes:
      - ./backend/search-service:/app
      - /app/node_modules
    depends_on:
      elasticsearch:
        condition: service_healthy
      product-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile.dev
    container_name: ultramarket-api-gateway
    environment:
      NODE_ENV: development
      PORT: 3000
      USER_SERVICE_URL: http://user-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
      CART_SERVICE_URL: http://cart-service:3003
      ORDER_SERVICE_URL: http://order-service:3004
      PAYMENT_SERVICE_URL: http://payment-service:3005
      NOTIFICATION_SERVICE_URL: http://notification-service:3006
      SEARCH_SERVICE_URL: http://search-service:3007
      JWT_SECRET: your-super-secret-jwt-key-for-development
    ports:
      - "3000:3000"
    volumes:
      - ./backend/api-gateway:/app
      - /app/node_modules
    depends_on:
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      search-service:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web App
  web-app:
    build:
      context: ./frontend/web-app
      dockerfile: Dockerfile.dev
    container_name: ultramarket-web-app
    environment:
      NODE_ENV: development
      PORT: 8080
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_WS_URL: ws://localhost:3000
    ports:
      - "8080:8080"
    volumes:
      - ./frontend/web-app:/app
      - /app/node_modules
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ./frontend/admin-dashboard
      dockerfile: Dockerfile.dev
    container_name: ultramarket-admin-dashboard
    environment:
      NODE_ENV: development
      PORT: 8081
      REACT_APP_API_URL: http://localhost:3000
    ports:
      - "8081:8081"
    volumes:
      - ./frontend/admin-dashboard:/app
      - /app/node_modules
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - ultramarket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  elasticsearch_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  ultramarket-network:
    driver: bridge 